#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
#ifndef DATADOGSESSIONREPLAY_SWIFT_H
#define DATADOGSESSIONREPLAY_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="DatadogSessionReplay",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)








@class DDSessionReplayPrivacyOverrides;

@interface UIView (SWIFT_EXTENSION(DatadogSessionReplay))
@property (nonatomic, readonly, strong) DDSessionReplayPrivacyOverrides * _Nonnull ddSessionReplayPrivacyOverrides;
@end


/// Available image privacy levels for image masking.
typedef SWIFT_ENUM_NAMED(NSInteger, DDImagePrivacyLevel, "objc_ImagePrivacyLevel", open) {
/// Only SF Symbols and images loaded using UIImage(named:) that are bundled within the application package will be recorded.
  DDImagePrivacyLevelMaskNonBundledOnly = 0,
/// No images will be recorded.
  DDImagePrivacyLevelMaskAll = 1,
/// All images will be recorded, including the ones downloaded from the Internet or generated during the app runtime.
  DDImagePrivacyLevelMaskNone = 2,
};

/// Image privacy override (e.g., mask or unmask specific images).
typedef SWIFT_ENUM_NAMED(NSInteger, DDImagePrivacyLevelOverride, "objc_ImagePrivacyLevelOverride", open) {
  DDImagePrivacyLevelOverrideNone = 0,
  DDImagePrivacyLevelOverrideMaskNone = 1,
  DDImagePrivacyLevelOverrideMaskNonBundledOnly = 2,
  DDImagePrivacyLevelOverrideMaskAll = 3,
};

@class DDSessionReplayConfiguration;

/// An entry point to Datadog Session Replay feature.
SWIFT_CLASS_NAMED("objc_SessionReplay")
@interface DDSessionReplay : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Enables Datadog Session Replay feature.
/// Recording will start automatically after enabling Session Replay.
/// Note: Session Replay requires the RUM feature to be enabled.
/// \param configuration Configuration of the feature.
///
+ (void)enableWith:(DDSessionReplayConfiguration * _Nonnull)configuration;
/// Starts the recording manually.
+ (void)startRecording;
/// Stops the recording manually.
+ (void)stopRecording;
@end

enum DDSessionReplayConfigurationPrivacyLevel : NSInteger;
enum DDTextAndInputPrivacyLevel : NSInteger;
enum DDTouchPrivacyLevel : NSInteger;
@class NSURL;
@class NSString;

/// Session Replay feature configuration.
SWIFT_CLASS_NAMED("objc_SessionReplayConfiguration")
@interface DDSessionReplayConfiguration : NSObject
/// The sampling rate for Session Replay. It is applied in addition to the RUM session sample rate.
/// It must be a number between 0.0 and 100.0, where 0 means no replays will be recorded
/// and 100 means all RUM sessions will contain replay.
/// Note: This sample rate is applied in addition to the RUM sample rate. For example, if RUM uses a sample rate of 80%
/// and Session Replay uses a sample rate of 20%, it means that out of all user sessions, 80% will be included in RUM,
/// and within those sessions, only 20% will have replays.
@property (nonatomic) float replaySampleRate;
/// Defines the way sensitive content (e.g. text) should be masked.
/// Default: <code>.mask</code>.
@property (nonatomic) enum DDSessionReplayConfigurationPrivacyLevel defaultPrivacyLevel SWIFT_DEPRECATED_MSG("This will be removed in future versions of the SDK. Use the new privacy levels instead.");
/// Defines the way texts and inputs (e.g. labels, textfields, checkboxes) should be masked.
/// Default: <code>.maskAll</code>.
@property (nonatomic) enum DDTextAndInputPrivacyLevel textAndInputPrivacyLevel;
/// Defines the way images should be masked.
/// Default: <code>.maskAll</code>.
@property (nonatomic) enum DDImagePrivacyLevel imagePrivacyLevel;
/// Defines the way user touches (e.g. tap) should be masked.
/// Default: <code>.hide</code>.
@property (nonatomic) enum DDTouchPrivacyLevel touchPrivacyLevel;
/// Defines it the recording should start automatically. When <code>true</code>, the recording starts automatically; when <code>false</code> it doesn’t, and the recording will need to be started manually.
/// Default: <code>true</code>.
@property (nonatomic) BOOL startRecordingImmediately;
/// Custom server url for sending replay data.
/// Default: <code>nil</code>.
@property (nonatomic, copy) NSURL * _Nullable customEndpoint;
/// Feature flags to preview features in Session Replay.
/// Available flags:
/// <ul>
///   <li>
///     <code>swiftui</code>: <code>false</code> by default.
///   </li>
/// </ul>
@property (nonatomic, copy) NSDictionary<NSString *, NSNumber *> * _Nonnull featureFlags;
/// Creates Session Replay configuration.
/// \param replaySampleRate The sampling rate for Session Replay. It is applied in addition to the RUM session sample rate.
///
/// \param textAndInputPrivacyLevel The way texts and inputs (e.g. label, textfield, checkbox) should be masked.
///
/// \param imagePrivacyLevel Image recording privacy level.
///
/// \param touchPrivacyLevel The way user touches (e.g. tap) should be masked.
///
/// \param featureFlags Experimental feature flags.
///
- (nonnull instancetype)initWithReplaySampleRate:(float)replaySampleRate textAndInputPrivacyLevel:(enum DDTextAndInputPrivacyLevel)textAndInputPrivacyLevel imagePrivacyLevel:(enum DDImagePrivacyLevel)imagePrivacyLevel touchPrivacyLevel:(enum DDTouchPrivacyLevel)touchPrivacyLevel featureFlags:(NSDictionary<NSString *, NSNumber *> * _Nullable)featureFlags OBJC_DESIGNATED_INITIALIZER;
/// Creates Session Replay configuration.
/// \param replaySampleRate The sampling rate for Session Replay. It is applied in addition to the RUM session sample rate.
///
/// \param textAndInputPrivacyLevel The way texts and inputs (e.g. label, textfield, checkbox) should be masked.
///
/// \param imagePrivacyLevel Image recording privacy level
///
/// \param touchPrivacyLevel The way user touches (e.g. tap) should be masked.
///
- (nonnull instancetype)initWithReplaySampleRate:(float)replaySampleRate textAndInputPrivacyLevel:(enum DDTextAndInputPrivacyLevel)textAndInputPrivacyLevel imagePrivacyLevel:(enum DDImagePrivacyLevel)imagePrivacyLevel touchPrivacyLevel:(enum DDTouchPrivacyLevel)touchPrivacyLevel;
/// Creates Session Replay configuration.
/// \param replaySampleRate The sampling rate for Session Replay. It is applied in addition to the RUM session sample rate.
///
- (nonnull instancetype)initWithReplaySampleRate:(float)replaySampleRate OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("This will be removed in future versions of the SDK. Use `init(replaySampleRate:textAndInputPrivacyLevel:imagePrivacyLevel:touchPrivacyLevel:)` instead.");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Available privacy levels for content masking.
typedef SWIFT_ENUM_NAMED(NSInteger, DDSessionReplayConfigurationPrivacyLevel, "objc_SessionReplayConfigurationPrivacyLevel", open) {
/// Record all content.
  DDSessionReplayConfigurationPrivacyLevelAllow = 0,
/// Mask all content.
  DDSessionReplayConfigurationPrivacyLevelMask = 1,
/// Mask input elements, but record all other content.
  DDSessionReplayConfigurationPrivacyLevelMaskUserInput = 2,
};

enum DDTextAndInputPrivacyLevelOverride : NSInteger;
enum DDTouchPrivacyLevelOverride : NSInteger;
@class NSNumber;

/// A wrapper class for Objective-C compatibility, providing overrides for Session Replay privacy settings.
SWIFT_CLASS_NAMED("objc_SessionReplayPrivacyOverrides")
@interface DDSessionReplayPrivacyOverrides : NSObject
- (nonnull instancetype)initWithView:(UIView * _Nonnull)view OBJC_DESIGNATED_INITIALIZER;
/// Text and input privacy override (e.g., mask or unmask specific text fields, labels, etc.).
@property (nonatomic) enum DDTextAndInputPrivacyLevelOverride textAndInputPrivacy;
/// Image privacy override (e.g., mask or unmask specific images).
@property (nonatomic) enum DDImagePrivacyLevelOverride imagePrivacy;
/// Touch privacy override (e.g., hide or show touch interactions on specific views).
@property (nonatomic) enum DDTouchPrivacyLevelOverride touchPrivacy;
/// Hidden privacy override (e.g., mark a view as hidden, rendering it as an opaque wireframe in replays).
@property (nonatomic, strong) NSNumber * _Nullable hide;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Available privacy levels for text and input masking.
typedef SWIFT_ENUM_NAMED(NSInteger, DDTextAndInputPrivacyLevel, "objc_TextAndInputPrivacyLevel", open) {
/// Show all text except sensitive input (eg. password fields).
  DDTextAndInputPrivacyLevelMaskSensitiveInputs = 0,
/// Mask all text and input, eg. textfields, switches, checkboxes.
  DDTextAndInputPrivacyLevelMaskAllInputs = 1,
/// Mask all text and input.
  DDTextAndInputPrivacyLevelMaskAll = 2,
};

/// Text and input privacy override (e.g., mask or unmask specific text fields, labels, etc.).
typedef SWIFT_ENUM_NAMED(NSInteger, DDTextAndInputPrivacyLevelOverride, "objc_TextAndInputPrivacyLevelOverride", open) {
  DDTextAndInputPrivacyLevelOverrideNone = 0,
  DDTextAndInputPrivacyLevelOverrideMaskSensitiveInputs = 1,
  DDTextAndInputPrivacyLevelOverrideMaskAllInputs = 2,
  DDTextAndInputPrivacyLevelOverrideMaskAll = 3,
};

/// Available privacy levels for touch masking.
typedef SWIFT_ENUM_NAMED(NSInteger, DDTouchPrivacyLevel, "objc_TouchPrivacyLevel", open) {
/// Show all touches.
  DDTouchPrivacyLevelShow = 0,
/// Hide all touches.
  DDTouchPrivacyLevelHide = 1,
};

/// Touch privacy override (e.g., hide or show touch interactions on specific views).
typedef SWIFT_ENUM_NAMED(NSInteger, DDTouchPrivacyLevelOverride, "objc_TouchPrivacyLevelOverride", open) {
  DDTouchPrivacyLevelOverrideNone = 0,
  DDTouchPrivacyLevelOverrideShow = 1,
  DDTouchPrivacyLevelOverrideHide = 2,
};

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
#ifndef DATADOGSESSIONREPLAY_SWIFT_H
#define DATADOGSESSIONREPLAY_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="DatadogSessionReplay",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)








@class DDSessionReplayPrivacyOverrides;

@interface UIView (SWIFT_EXTENSION(DatadogSessionReplay))
@property (nonatomic, readonly, strong) DDSessionReplayPrivacyOverrides * _Nonnull ddSessionReplayPrivacyOverrides;
@end


/// Available image privacy levels for image masking.
typedef SWIFT_ENUM_NAMED(NSInteger, DDImagePrivacyLevel, "objc_ImagePrivacyLevel", open) {
/// Only SF Symbols and images loaded using UIImage(named:) that are bundled within the application package will be recorded.
  DDImagePrivacyLevelMaskNonBundledOnly = 0,
/// No images will be recorded.
  DDImagePrivacyLevelMaskAll = 1,
/// All images will be recorded, including the ones downloaded from the Internet or generated during the app runtime.
  DDImagePrivacyLevelMaskNone = 2,
};

/// Image privacy override (e.g., mask or unmask specific images).
typedef SWIFT_ENUM_NAMED(NSInteger, DDImagePrivacyLevelOverride, "objc_ImagePrivacyLevelOverride", open) {
  DDImagePrivacyLevelOverrideNone = 0,
  DDImagePrivacyLevelOverrideMaskNone = 1,
  DDImagePrivacyLevelOverrideMaskNonBundledOnly = 2,
  DDImagePrivacyLevelOverrideMaskAll = 3,
};

@class DDSessionReplayConfiguration;

/// An entry point to Datadog Session Replay feature.
SWIFT_CLASS_NAMED("objc_SessionReplay")
@interface DDSessionReplay : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Enables Datadog Session Replay feature.
/// Recording will start automatically after enabling Session Replay.
/// Note: Session Replay requires the RUM feature to be enabled.
/// \param configuration Configuration of the feature.
///
+ (void)enableWith:(DDSessionReplayConfiguration * _Nonnull)configuration;
/// Starts the recording manually.
+ (void)startRecording;
/// Stops the recording manually.
+ (void)stopRecording;
@end

enum DDSessionReplayConfigurationPrivacyLevel : NSInteger;
enum DDTextAndInputPrivacyLevel : NSInteger;
enum DDTouchPrivacyLevel : NSInteger;
@class NSURL;
@class NSString;

/// Session Replay feature configuration.
SWIFT_CLASS_NAMED("objc_SessionReplayConfiguration")
@interface DDSessionReplayConfiguration : NSObject
/// The sampling rate for Session Replay. It is applied in addition to the RUM session sample rate.
/// It must be a number between 0.0 and 100.0, where 0 means no replays will be recorded
/// and 100 means all RUM sessions will contain replay.
/// Note: This sample rate is applied in addition to the RUM sample rate. For example, if RUM uses a sample rate of 80%
/// and Session Replay uses a sample rate of 20%, it means that out of all user sessions, 80% will be included in RUM,
/// and within those sessions, only 20% will have replays.
@property (nonatomic) float replaySampleRate;
/// Defines the way sensitive content (e.g. text) should be masked.
/// Default: <code>.mask</code>.
@property (nonatomic) enum DDSessionReplayConfigurationPrivacyLevel defaultPrivacyLevel SWIFT_DEPRECATED_MSG("This will be removed in future versions of the SDK. Use the new privacy levels instead.");
/// Defines the way texts and inputs (e.g. labels, textfields, checkboxes) should be masked.
/// Default: <code>.maskAll</code>.
@property (nonatomic) enum DDTextAndInputPrivacyLevel textAndInputPrivacyLevel;
/// Defines the way images should be masked.
/// Default: <code>.maskAll</code>.
@property (nonatomic) enum DDImagePrivacyLevel imagePrivacyLevel;
/// Defines the way user touches (e.g. tap) should be masked.
/// Default: <code>.hide</code>.
@property (nonatomic) enum DDTouchPrivacyLevel touchPrivacyLevel;
/// Defines it the recording should start automatically. When <code>true</code>, the recording starts automatically; when <code>false</code> it doesn’t, and the recording will need to be started manually.
/// Default: <code>true</code>.
@property (nonatomic) BOOL startRecordingImmediately;
/// Custom server url for sending replay data.
/// Default: <code>nil</code>.
@property (nonatomic, copy) NSURL * _Nullable customEndpoint;
/// Feature flags to preview features in Session Replay.
/// Available flags:
/// <ul>
///   <li>
///     <code>swiftui</code>: <code>false</code> by default.
///   </li>
/// </ul>
@property (nonatomic, copy) NSDictionary<NSString *, NSNumber *> * _Nonnull featureFlags;
/// Creates Session Replay configuration.
/// \param replaySampleRate The sampling rate for Session Replay. It is applied in addition to the RUM session sample rate.
///
/// \param textAndInputPrivacyLevel The way texts and inputs (e.g. label, textfield, checkbox) should be masked.
///
/// \param imagePrivacyLevel Image recording privacy level.
///
/// \param touchPrivacyLevel The way user touches (e.g. tap) should be masked.
///
/// \param featureFlags Experimental feature flags.
///
- (nonnull instancetype)initWithReplaySampleRate:(float)replaySampleRate textAndInputPrivacyLevel:(enum DDTextAndInputPrivacyLevel)textAndInputPrivacyLevel imagePrivacyLevel:(enum DDImagePrivacyLevel)imagePrivacyLevel touchPrivacyLevel:(enum DDTouchPrivacyLevel)touchPrivacyLevel featureFlags:(NSDictionary<NSString *, NSNumber *> * _Nullable)featureFlags OBJC_DESIGNATED_INITIALIZER;
/// Creates Session Replay configuration.
/// \param replaySampleRate The sampling rate for Session Replay. It is applied in addition to the RUM session sample rate.
///
/// \param textAndInputPrivacyLevel The way texts and inputs (e.g. label, textfield, checkbox) should be masked.
///
/// \param imagePrivacyLevel Image recording privacy level
///
/// \param touchPrivacyLevel The way user touches (e.g. tap) should be masked.
///
- (nonnull instancetype)initWithReplaySampleRate:(float)replaySampleRate textAndInputPrivacyLevel:(enum DDTextAndInputPrivacyLevel)textAndInputPrivacyLevel imagePrivacyLevel:(enum DDImagePrivacyLevel)imagePrivacyLevel touchPrivacyLevel:(enum DDTouchPrivacyLevel)touchPrivacyLevel;
/// Creates Session Replay configuration.
/// \param replaySampleRate The sampling rate for Session Replay. It is applied in addition to the RUM session sample rate.
///
- (nonnull instancetype)initWithReplaySampleRate:(float)replaySampleRate OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("This will be removed in future versions of the SDK. Use `init(replaySampleRate:textAndInputPrivacyLevel:imagePrivacyLevel:touchPrivacyLevel:)` instead.");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Available privacy levels for content masking.
typedef SWIFT_ENUM_NAMED(NSInteger, DDSessionReplayConfigurationPrivacyLevel, "objc_SessionReplayConfigurationPrivacyLevel", open) {
/// Record all content.
  DDSessionReplayConfigurationPrivacyLevelAllow = 0,
/// Mask all content.
  DDSessionReplayConfigurationPrivacyLevelMask = 1,
/// Mask input elements, but record all other content.
  DDSessionReplayConfigurationPrivacyLevelMaskUserInput = 2,
};

enum DDTextAndInputPrivacyLevelOverride : NSInteger;
enum DDTouchPrivacyLevelOverride : NSInteger;
@class NSNumber;

/// A wrapper class for Objective-C compatibility, providing overrides for Session Replay privacy settings.
SWIFT_CLASS_NAMED("objc_SessionReplayPrivacyOverrides")
@interface DDSessionReplayPrivacyOverrides : NSObject
- (nonnull instancetype)initWithView:(UIView * _Nonnull)view OBJC_DESIGNATED_INITIALIZER;
/// Text and input privacy override (e.g., mask or unmask specific text fields, labels, etc.).
@property (nonatomic) enum DDTextAndInputPrivacyLevelOverride textAndInputPrivacy;
/// Image privacy override (e.g., mask or unmask specific images).
@property (nonatomic) enum DDImagePrivacyLevelOverride imagePrivacy;
/// Touch privacy override (e.g., hide or show touch interactions on specific views).
@property (nonatomic) enum DDTouchPrivacyLevelOverride touchPrivacy;
/// Hidden privacy override (e.g., mark a view as hidden, rendering it as an opaque wireframe in replays).
@property (nonatomic, strong) NSNumber * _Nullable hide;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Available privacy levels for text and input masking.
typedef SWIFT_ENUM_NAMED(NSInteger, DDTextAndInputPrivacyLevel, "objc_TextAndInputPrivacyLevel", open) {
/// Show all text except sensitive input (eg. password fields).
  DDTextAndInputPrivacyLevelMaskSensitiveInputs = 0,
/// Mask all text and input, eg. textfields, switches, checkboxes.
  DDTextAndInputPrivacyLevelMaskAllInputs = 1,
/// Mask all text and input.
  DDTextAndInputPrivacyLevelMaskAll = 2,
};

/// Text and input privacy override (e.g., mask or unmask specific text fields, labels, etc.).
typedef SWIFT_ENUM_NAMED(NSInteger, DDTextAndInputPrivacyLevelOverride, "objc_TextAndInputPrivacyLevelOverride", open) {
  DDTextAndInputPrivacyLevelOverrideNone = 0,
  DDTextAndInputPrivacyLevelOverrideMaskSensitiveInputs = 1,
  DDTextAndInputPrivacyLevelOverrideMaskAllInputs = 2,
  DDTextAndInputPrivacyLevelOverrideMaskAll = 3,
};

/// Available privacy levels for touch masking.
typedef SWIFT_ENUM_NAMED(NSInteger, DDTouchPrivacyLevel, "objc_TouchPrivacyLevel", open) {
/// Show all touches.
  DDTouchPrivacyLevelShow = 0,
/// Hide all touches.
  DDTouchPrivacyLevelHide = 1,
};

/// Touch privacy override (e.g., hide or show touch interactions on specific views).
typedef SWIFT_ENUM_NAMED(NSInteger, DDTouchPrivacyLevelOverride, "objc_TouchPrivacyLevelOverride", open) {
  DDTouchPrivacyLevelOverrideNone = 0,
  DDTouchPrivacyLevelOverrideShow = 1,
  DDTouchPrivacyLevelOverrideHide = 2,
};

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif

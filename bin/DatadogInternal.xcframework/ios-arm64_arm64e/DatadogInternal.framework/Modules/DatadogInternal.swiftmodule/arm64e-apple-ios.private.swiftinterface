// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
// swift-module-flags: -target arm64e-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name DatadogInternal
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import CommonCrypto
import Compression
import Foundation
import MachO
import OSLog
import Swift
import SwiftShims
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import zlib
public enum CoreLoggerLevel : Swift.Int, Swift.Comparable, Swift.CaseIterable {
  case debug
  case warn
  case error
  case critical
  public static func < (lhs: DatadogInternal.CoreLoggerLevel, rhs: DatadogInternal.CoreLoggerLevel) -> Swift.Bool
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [DatadogInternal.CoreLoggerLevel]
  public typealias RawValue = Swift.Int
  nonisolated public static var allCases: [DatadogInternal.CoreLoggerLevel] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public protocol CoreLogger {
  func log(_ level: DatadogInternal.CoreLoggerLevel, message: @autoclosure () -> Swift.String, error: (any Swift.Error)?)
}
extension DatadogInternal.CoreLogger {
  public func debug(_ message: @autoclosure () -> Swift.String, error: (any Swift.Error)? = nil)
  public func warn(_ message: @autoclosure () -> Swift.String, error: (any Swift.Error)? = nil)
  public func error(_ message: @autoclosure () -> Swift.String, error: (any Swift.Error)? = nil)
  public func critical(_ message: @autoclosure () -> Swift.String, error: (any Swift.Error)? = nil)
}
public class HTTPHeadersReader : DatadogInternal.TracePropagationHeadersReader {
  public init(httpHeaderFields: [Swift.String : Swift.String])
  public func read() -> (traceID: DatadogInternal.TraceID, spanID: DatadogInternal.SpanID, parentSpanID: DatadogInternal.SpanID?)?
  public var sampled: Swift.Bool? {
    get
  }
  @objc deinit
}
public enum ApplicationNotifications {
  public static var didBecomeActive: Foundation.Notification.Name {
    get
  }
  public static var willResignActive: Foundation.Notification.Name {
    get
  }
  public static var didEnterBackground: Foundation.Notification.Name {
    get
  }
  public static var willEnterForeground: Foundation.Notification.Name {
    get
  }
}
public enum UploadQualityMetric {
  public static let name: Swift.String
  public static let track: Swift.String
  public static let failure: Swift.String
  public static let blockers: Swift.String
}
public struct PerformancePresetOverride {
  public let maxFileSize: Swift.UInt32?
  public let maxObjectSize: Swift.UInt32?
  public let maxFileAgeForWrite: Foundation.TimeInterval?
  public let minFileAgeForRead: Foundation.TimeInterval?
  public let initialUploadDelay: Foundation.TimeInterval?
  public let minUploadDelay: Foundation.TimeInterval?
  public let maxUploadDelay: Foundation.TimeInterval?
  public let uploadDelayChangeRate: Swift.Double?
  public init(maxFileSize: Swift.UInt32?, maxObjectSize: Swift.UInt32?, meanFileAge: Foundation.TimeInterval? = nil, uploadDelay: (initial: Foundation.TimeInterval, range: Swift.Range<Foundation.TimeInterval>, changeRate: Swift.Double)? = nil)
}
public struct NetworkConnectionInfo : Swift.Codable, Swift.Equatable, DatadogInternal.PassthroughAnyCodable {
  public enum Reachability : Swift.String, Swift.Codable, Swift.CaseIterable {
    case yes
    case maybe
    case no
    public init?(rawValue: Swift.String)
    public typealias AllCases = [DatadogInternal.NetworkConnectionInfo.Reachability]
    public typealias RawValue = Swift.String
    nonisolated public static var allCases: [DatadogInternal.NetworkConnectionInfo.Reachability] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Interface : Swift.String, Swift.Codable, Swift.CaseIterable {
    case wifi
    case wiredEthernet
    case cellular
    case loopback
    case other
    public init?(rawValue: Swift.String)
    public typealias AllCases = [DatadogInternal.NetworkConnectionInfo.Interface]
    public typealias RawValue = Swift.String
    nonisolated public static var allCases: [DatadogInternal.NetworkConnectionInfo.Interface] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public let reachability: DatadogInternal.NetworkConnectionInfo.Reachability
  public let availableInterfaces: [DatadogInternal.NetworkConnectionInfo.Interface]?
  public let supportsIPv4: Swift.Bool?
  public let supportsIPv6: Swift.Bool?
  public let isExpensive: Swift.Bool?
  public let isConstrained: Swift.Bool?
  public init(reachability: DatadogInternal.NetworkConnectionInfo.Reachability, availableInterfaces: [DatadogInternal.NetworkConnectionInfo.Interface]?, supportsIPv4: Swift.Bool?, supportsIPv6: Swift.Bool?, isExpensive: Swift.Bool?, isConstrained: Swift.Bool?)
  public static func == (a: DatadogInternal.NetworkConnectionInfo, b: DatadogInternal.NetworkConnectionInfo) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum TrackingConsent : Swift.Codable, DatadogInternal.PassthroughAnyCodable {
  case granted
  case notGranted
  case pending
  public static func == (a: DatadogInternal.TrackingConsent, b: DatadogInternal.TrackingConsent) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@available(*, deprecated, renamed: "B3HTTPHeaders")
public typealias OTelHTTPHeaders = DatadogInternal.B3HTTPHeaders
public enum B3HTTPHeaders {
  public enum Multiple {
    public static let traceIDField: Swift.String
    public static let spanIDField: Swift.String
    public static let parentSpanIDField: Swift.String
    public static let sampledField: Swift.String
  }
  public enum Single {
    public static let b3Field: Swift.String
  }
  public enum Constants {
    public static let sampledValue: Swift.String
    public static let unsampledValue: Swift.String
    public static let b3Separator: Swift.String
  }
}
public struct InternalExtension<ExtendedType> {
  public var type: ExtendedType
  public init(_ type: ExtendedType)
}
public protocol InternalExtended {
  associatedtype ExtendedType
  static var _internal: DatadogInternal.InternalExtension<Self.ExtendedType>.Type { get }
  var _internal: DatadogInternal.InternalExtension<Self.ExtendedType> { get }
  mutating func _internal_mutation(_ mutation: (inout DatadogInternal.InternalExtension<Self.ExtendedType>) -> Swift.Void)
}
extension DatadogInternal.InternalExtended {
  public static var _internal: DatadogInternal.InternalExtension<Self>.Type {
    get
  }
  public var _internal: DatadogInternal.InternalExtension<Self> {
    get
  }
  public mutating func _internal_mutation(_ mutation: (inout DatadogInternal.InternalExtension<Self>) -> Swift.Void)
}
public struct GlobalRUMAttributes : Swift.Codable, DatadogInternal.PassthroughAnyCodable {
  public let attributes: [DatadogInternal.AttributeKey : any Swift.Encodable]
  public init(attributes: [DatadogInternal.AttributeKey : any Swift.Encodable])
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DynamicCodingKey : Swift.CodingKey, Swift.Hashable {
  public var stringValue: Swift.String
  public init?(stringValue: Swift.String)
  public var intValue: Swift.Int?
  public init?(intValue: Swift.Int)
  public init(_ stringValue: Swift.String)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: DatadogInternal.DynamicCodingKey, b: DatadogInternal.DynamicCodingKey) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension DatadogInternal.DynamicCodingKey : Swift.ExpressibleByStringLiteral {
  public init(stringLiteral value: Swift.String)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
public protocol FeatureRequestBuilder {
  func request(for events: [DatadogInternal.Event], with context: DatadogInternal.DatadogContext, execution: DatadogInternal.ExecutionContext) throws -> Foundation.URLRequest
}
public struct ExecutionContext {
  public let previousResponseCode: Swift.Int?
  public let attempt: Swift.UInt
  public init(previousResponseCode: Swift.Int?, attempt: Swift.UInt)
}
open class MethodSwizzler<Signature, Override> {
  public init()
  public func swizzle(_ method: ObjectiveC.Method, override: @escaping (Signature) -> Override)
  public func unswizzle()
  @objc deinit
}
extension DatadogInternal.MethodSwizzler : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
public func dd_class_getInstanceMethod(_ cls: Swift.AnyClass, _ name: ObjectiveC.Selector) throws -> ObjectiveC.Method
@available(*, deprecated, message: "Use `URLSessionInstrumentation.enable(with:)` instead.")
public typealias DDURLSessionDelegate = DatadogInternal.DatadogURLSessionDelegate
@available(*, deprecated, message: "Use `URLSessionInstrumentation.enable(with:)` instead.")
@objc public protocol __URLSessionDelegateProviding : Foundation.URLSessionDelegate {
  @objc var ddURLSessionDelegate: DatadogInternal.DatadogURLSessionDelegate { get }
}
@_inheritsConvenienceInitializers @available(*, deprecated, message: "Use `URLSessionInstrumentation.enable(with:)` instead.")
@objc open class DatadogURLSessionDelegate : ObjectiveC.NSObject, Foundation.URLSessionDataDelegate {
  @objc override dynamic public init()
  convenience public init(additionalFirstPartyHostsWithHeaderTypes: [Swift.String : Swift.Set<DatadogInternal.TracingHeaderType>])
  @objc convenience public init(additionalFirstPartyHosts: Swift.Set<Swift.String>)
  public init(in core: (any DatadogInternal.DatadogCoreProtocol)? = nil, additionalFirstPartyHostsWithHeaderTypes: [Swift.String : Swift.Set<DatadogInternal.TracingHeaderType>] = [:])
  @objc open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didFinishCollecting metrics: Foundation.URLSessionTaskMetrics)
  @objc open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  @objc open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: (any Swift.Error)?)
  @objc deinit
}
@available(*, deprecated, message: "Use `URLSessionInstrumentation.enable(with:)` instead.")
extension DatadogInternal.DatadogURLSessionDelegate : DatadogInternal.__URLSessionDelegateProviding {
  @objc dynamic public var ddURLSessionDelegate: DatadogInternal.DatadogURLSessionDelegate {
    @objc get
  }
}
public class HTTPHeadersWriter : DatadogInternal.TracePropagationHeadersWriter {
  public var traceHeaderFields: [Swift.String : Swift.String] {
    get
  }
  @available(*, deprecated, message: "This will be removed in future versions of the SDK. Use `init(samplingStrategy: .custom(sampleRate:))` instead.")
  convenience public init(samplingRate: Swift.Float)
  @available(*, deprecated, message: "This will be removed in future versions of the SDK. Use `init(samplingStrategy: .custom(sampleRate:))` instead.")
  convenience public init(sampleRate: Swift.Float = 20)
  public init(samplingStrategy: DatadogInternal.TraceSamplingStrategy, traceContextInjection: DatadogInternal.TraceContextInjection)
  public func write(traceContext: DatadogInternal.TraceContext)
  @objc deinit
}
public protocol Flushable {
  func flush()
}
public struct AttributesSanitizer {
  public struct Constraints {
    public static let maxNestedLevelsInAttributeName: Swift.Int
    public static let maxNumberOfAttributes: Swift.Int
  }
  public init(featureName: Swift.String)
  public func sanitizeKeys<Value>(for attributes: [Swift.String : Value], prefixLevels: Swift.Int = 0) -> [Swift.String : Value]
  public func limitNumberOf<Value>(attributes: [Swift.String : Value], to count: Swift.Int) -> [Swift.String : Value]
}
public protocol DatadogFeature {
  static var name: Swift.String { get }
  var messageReceiver: any DatadogInternal.FeatureMessageReceiver { get }
  var performanceOverride: DatadogInternal.PerformancePresetOverride? { get }
}
public protocol DatadogRemoteFeature : DatadogInternal.DatadogFeature {
  var requestBuilder: any DatadogInternal.FeatureRequestBuilder { get }
}
extension DatadogInternal.DatadogFeature {
  public var performanceOverride: DatadogInternal.PerformancePresetOverride? {
    get
  }
}
public enum URLSessionInstrumentation {
  public static func enable(with configuration: DatadogInternal.URLSessionInstrumentation.Configuration, in core: any DatadogInternal.DatadogCoreProtocol = CoreRegistry.default)
  public static func disable(delegateClass: any Foundation.URLSessionDataDelegate.Type, in core: any DatadogInternal.DatadogCoreProtocol = CoreRegistry.default)
}
extension DatadogInternal.URLSessionInstrumentation {
  public struct Configuration {
    public var delegateClass: any Foundation.URLSessionDataDelegate.Type
    public var firstPartyHostsTracing: DatadogInternal.URLSessionInstrumentation.FirstPartyHostsTracing?
    public init(delegateClass: any Foundation.URLSessionDataDelegate.Type, firstPartyHostsTracing: DatadogInternal.URLSessionInstrumentation.FirstPartyHostsTracing? = nil)
  }
  public enum FirstPartyHostsTracing {
    case trace(hosts: Swift.Set<Swift.String>)
    case traceWithHeaders(hostsWithHeaders: [Swift.String : Swift.Set<DatadogInternal.TracingHeaderType>])
  }
}
public struct CarrierInfo : Swift.Codable, Swift.Equatable, DatadogInternal.PassthroughAnyCodable {
  public enum RadioAccessTechnology : Swift.String, Swift.Codable, Swift.CaseIterable {
    case GPRS
    case Edge
    case WCDMA
    case HSDPA
    case HSUPA
    case CDMA1x
    case CDMAEVDORev0
    case CDMAEVDORevA
    case CDMAEVDORevB
    case eHRPD
    case LTE
    case unknown
    public init?(rawValue: Swift.String)
    public typealias AllCases = [DatadogInternal.CarrierInfo.RadioAccessTechnology]
    public typealias RawValue = Swift.String
    nonisolated public static var allCases: [DatadogInternal.CarrierInfo.RadioAccessTechnology] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public let carrierName: Swift.String?
  public let carrierISOCountryCode: Swift.String?
  public let carrierAllowsVOIP: Swift.Bool
  public let radioAccessTechnology: DatadogInternal.CarrierInfo.RadioAccessTechnology
  public init(carrierName: Swift.String?, carrierISOCountryCode: Swift.String?, carrierAllowsVOIP: Swift.Bool, radioAccessTechnology: DatadogInternal.CarrierInfo.RadioAccessTechnology)
  public static func == (a: DatadogInternal.CarrierInfo, b: DatadogInternal.CarrierInfo) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DDError : Swift.Equatable, Swift.Codable, DatadogInternal.PassthroughAnyCodable {
  public static let threads: Swift.String
  public static let binaryImages: Swift.String
  public static let meta: Swift.String
  public static let wasTruncated: Swift.String
  public let type: Swift.String
  public let message: Swift.String
  public let stack: Swift.String
  public let sourceType: Swift.String
  public init(type: Swift.String, message: Swift.String, stack: Swift.String, sourceType: Swift.String = "ios")
  public static func == (a: DatadogInternal.DDError, b: DatadogInternal.DDError) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension DatadogInternal.DDError {
  public init(error: any Swift.Error)
}
public struct ProgrammerError : Swift.Error, Swift.CustomStringConvertible {
  public let description: Swift.String
  public init(description: Swift.String)
}
public struct InternalError : Swift.Error, Swift.CustomStringConvertible {
  public let description: Swift.String
  public init(description: Swift.String)
}
public struct ObjcException : Swift.Error {
  public static var rethrow: ((() -> Swift.Void) throws -> Swift.Void)
  public let error: any Swift.Error
  public let file: Swift.String
  public let line: Swift.Int
}
@discardableResult
public func objc_rethrow<T>(_ block: () throws -> T, file: Swift.String = #fileID, line: Swift.Int = #line) throws -> T
@frozen public struct AnyCodable : Swift.Codable {
  public let value: Any
  public init<T>(_ value: T?)
}
extension DatadogInternal.AnyCodable : DatadogInternal._AnyEncodable, DatadogInternal._AnyDecodable {
}
extension DatadogInternal.AnyCodable : Swift.Equatable {
  public static func == (lhs: DatadogInternal.AnyCodable, rhs: DatadogInternal.AnyCodable) -> Swift.Bool
}
extension DatadogInternal.DatadogExtension where ExtendedType == UIKit.UIApplication {
  public static var managedShared: UIKit.UIApplication? {
    get
  }
}
extension UIKit.UIApplication : DatadogInternal.DatadogExtended {
  @available(iOS 2.0, *)
  public typealias ExtendedType = UIKit.UIApplication
}
public struct BacktraceReport : Swift.Codable {
  public let stack: Swift.String
  public let threads: [DatadogInternal.DDThread]
  public let binaryImages: [DatadogInternal.BinaryImage]
  public let wasTruncated: Swift.Bool
  public init(stack: Swift.String, threads: [DatadogInternal.DDThread], binaryImages: [DatadogInternal.BinaryImage], wasTruncated: Swift.Bool)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Reflector {
  public enum Error : Swift.Error {
    public struct Context {
    }
    case notFound(DatadogInternal.Reflector.Error.Context)
    case typeMismatch(DatadogInternal.Reflector.Error.Context, expect: any Any.Type, got: any Any.Type)
  }
  public struct Lazy<T> where T : DatadogInternal.Reflection {
    public let reflect: () throws -> T
  }
  public var displayStyle: DatadogInternal.ReflectionMirror.DisplayStyle {
    get
  }
  public init(mirror: DatadogInternal.ReflectionMirror, telemetry: any DatadogInternal.Telemetry = NOPTelemetry())
  public init(subject: Any?, telemetry: any DatadogInternal.Telemetry)
  public func descendant(_ paths: [DatadogInternal.ReflectionMirror.Path]) -> Any?
  public func descendantIfPresent(_ first: DatadogInternal.ReflectionMirror.Path, _ rest: DatadogInternal.ReflectionMirror.Path...) -> Any?
  public func report(_ error: any Swift.Error)
}
public protocol Reflection {
  init(from reflector: DatadogInternal.Reflector) throws
}
extension DatadogInternal.Reflector {
  public func descendantIfPresent<T>(type: T.Type = T.self, _ first: DatadogInternal.ReflectionMirror.Path, _ rest: DatadogInternal.ReflectionMirror.Path...) -> T?
  public func descendant<T>(type: T.Type = T.self, _ first: DatadogInternal.ReflectionMirror.Path, _ rest: DatadogInternal.ReflectionMirror.Path...) throws -> T
  public func descendant<T>(type: T.Type = T.self, _ paths: [DatadogInternal.ReflectionMirror.Path]) throws -> T
}
extension DatadogInternal.Reflector {
  public func reflect<T>(type: T.Type = T.self, _ subject: Any?) throws -> T where T : DatadogInternal.Reflection
  public func descendantIfPresent<T>(type: T.Type = T.self, _ first: DatadogInternal.ReflectionMirror.Path, _ rest: DatadogInternal.ReflectionMirror.Path...) -> T? where T : DatadogInternal.Reflection
  public func descendant<T>(type: T.Type = T.self, _ first: DatadogInternal.ReflectionMirror.Path, _ rest: DatadogInternal.ReflectionMirror.Path...) throws -> T where T : DatadogInternal.Reflection
  public func descendant<Element>(_ first: DatadogInternal.ReflectionMirror.Path, _ rest: DatadogInternal.ReflectionMirror.Path...) throws -> [Element] where Element : DatadogInternal.Reflection
  public func descendant<Key, Value>(_ first: DatadogInternal.ReflectionMirror.Path, _ rest: DatadogInternal.ReflectionMirror.Path...) throws -> [Key : Value] where Key : Swift.Hashable, Value : DatadogInternal.Reflection
  public func descendant<Key, Value>(_ first: DatadogInternal.ReflectionMirror.Path, _ rest: DatadogInternal.ReflectionMirror.Path...) throws -> [Key : Value] where Key : DatadogInternal.Reflection, Key : Swift.Hashable, Value : DatadogInternal.Reflection
  public func descendant<T>(type: T.Type = T.self, _ paths: [DatadogInternal.ReflectionMirror.Path]) throws -> T where T : DatadogInternal.Reflection
}
extension DatadogInternal.Reflection {
  public typealias Lazy = DatadogInternal.Reflector.Lazy<Self>
}
extension DatadogInternal.Reflector.Lazy : DatadogInternal.Reflection {
  public init(from reflector: DatadogInternal.Reflector) throws
}
extension DatadogInternal.Reflector.Lazy {
  public init(_ reflection: T)
}
public struct ReflectionMirror {
  public typealias Child = (label: Swift.String?, value: Any)
  public typealias Children = Swift.AnyCollection<DatadogInternal.ReflectionMirror.Child>
  public enum DisplayStyle : Swift.Equatable {
    case `struct`
    case `class`
    case `enum`(case: Swift.String)
    case tuple
    case `nil`
    case opaque
    public static func == (a: DatadogInternal.ReflectionMirror.DisplayStyle, b: DatadogInternal.ReflectionMirror.DisplayStyle) -> Swift.Bool
  }
  public enum Path {
    case index(Swift.Int)
    case key(Swift.String)
  }
  public let subject: Any
  public let subjectType: any Any.Type
  public let displayStyle: DatadogInternal.ReflectionMirror.DisplayStyle
  public let children: DatadogInternal.ReflectionMirror.Children
  public var superclassMirror: DatadogInternal.ReflectionMirror? {
    get
  }
  public var keyPaths: [Swift.String : Swift.Int]? {
    get
  }
}
extension DatadogInternal.ReflectionMirror {
  public init(reflecting subject: Any, subjectType: (any Any.Type)? = nil)
}
extension DatadogInternal.ReflectionMirror.Path : Swift.ExpressibleByIntegerLiteral {
  public init(integerLiteral value: Swift.Int)
  public typealias IntegerLiteralType = Swift.Int
}
extension DatadogInternal.ReflectionMirror.Path : Swift.ExpressibleByStringLiteral {
  public init(stringLiteral value: Swift.String)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
public struct TraceID : Swift.RawRepresentable, Swift.Equatable, Swift.Hashable {
  public enum Representation {
    case decimal
    case hexadecimal
    case hexadecimal16Chars
    case hexadecimal32Chars
    public static func == (a: DatadogInternal.TraceID.Representation, b: DatadogInternal.TraceID.Representation) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var rawValue: (Swift.UInt64, Swift.UInt64) {
    get
  }
  public static let invalidId: Swift.UInt64
  public static let invalid: DatadogInternal.TraceID
  public var idHi: Swift.UInt64 {
    get
  }
  public var idLo: Swift.UInt64 {
    get
  }
  public var idHiHex: Swift.String {
    get
  }
  public var idLoHex: Swift.String {
    get
  }
  public init(rawValue: (Swift.UInt64, Swift.UInt64))
  public init(idLo: Swift.UInt64)
  public init(idHi: Swift.UInt64, idLo: Swift.UInt64)
  public init()
  public func toString(representation: DatadogInternal.TraceID.Representation) -> Swift.String
  public static func == (a: DatadogInternal.TraceID, b: DatadogInternal.TraceID) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias RawValue = (Swift.UInt64, Swift.UInt64)
  public var hashValue: Swift.Int {
    get
  }
}
extension DatadogInternal.TraceID : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension DatadogInternal.TraceID {
  public init?(_ string: Swift.String, representation: DatadogInternal.TraceID.Representation = .decimal)
}
extension DatadogInternal.TraceID : Swift.ExpressibleByIntegerLiteral {
  public init(integerLiteral value: Swift.UInt64)
  public typealias IntegerLiteralType = Swift.UInt64
}
extension Swift.String {
  public init(_ traceID: DatadogInternal.TraceID, representation: DatadogInternal.TraceID.Representation)
}
public protocol TraceIDGenerator {
  func generate() -> DatadogInternal.TraceID
}
public struct DefaultTraceIDGenerator : DatadogInternal.TraceIDGenerator {
  public static let defaultGenerationRange: (Swift.ClosedRange<Swift.UInt64>)
  public init(range: Swift.ClosedRange<Swift.UInt64> = Self.defaultGenerationRange)
  public func generate() -> DatadogInternal.TraceID
}
public enum W3CHTTPHeaders {
  public static let traceparent: Swift.String
  public static let tracestate: Swift.String
  public enum Constants {
    public static let version: Swift.String
    public static let sampledValue: Swift.String
    public static let unsampledValue: Swift.String
    public static let separator: Swift.String
    public static let dd: Swift.String
    public static let sampling: Swift.String
    public static let origin: Swift.String
    public static let originRUM: Swift.String
    public static let parentId: Swift.String
    public static let tracestateKeyValueSeparator: Swift.String
    public static let tracestatePairSeparator: Swift.String
  }
}
public struct DDThread : Swift.Codable, DatadogInternal.PassthroughAnyCodable {
  public let name: Swift.String
  public let stack: Swift.String
  public var crashed: Swift.Bool
  public let state: Swift.String?
  public init(name: Swift.String, stack: Swift.String, crashed: Swift.Bool, state: Swift.String?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BatteryStatus : Swift.Codable, Swift.Equatable, DatadogInternal.PassthroughAnyCodable {
  public enum State : Swift.Codable {
    case unknown
    case unplugged
    case charging
    case full
    public static func == (a: DatadogInternal.BatteryStatus.State, b: DatadogInternal.BatteryStatus.State) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
  public let state: DatadogInternal.BatteryStatus.State
  public let level: Swift.Float
  public init(state: DatadogInternal.BatteryStatus.State, level: Swift.Float)
  public static func == (a: DatadogInternal.BatteryStatus, b: DatadogInternal.BatteryStatus) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum TracingHTTPHeaders {
  public static let traceIDField: Swift.String
  public static let parentSpanIDField: Swift.String
  public static let samplingPriorityField: Swift.String
  public static let originField: Swift.String
  public static let tagsField: Swift.String
  public enum TagKeys {
    public static let traceIDHi: Swift.String
  }
}
public enum WebViewMessage {
  public enum EventType : Swift.String, Swift.Decodable {
    case log
    case rum
    case view
    case action
    case resource
    case error
    case longTask
    case record
    case telemetry
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public typealias Event = [Swift.String : Any]
  public struct View : Swift.Decodable {
    public let id: Swift.String
    public init(from decoder: any Swift.Decoder) throws
  }
  case log(DatadogInternal.WebViewMessage.Event)
  case rum(DatadogInternal.WebViewMessage.Event)
  case telemetry(DatadogInternal.WebViewMessage.Event)
  case record(DatadogInternal.WebViewMessage.Event, DatadogInternal.WebViewMessage.View)
}
extension DatadogInternal.WebViewMessage : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public struct LaunchTime : Swift.Codable, Swift.Equatable, DatadogInternal.PassthroughAnyCodable {
  public let launchTime: Foundation.TimeInterval?
  public let launchDate: Foundation.Date
  public let isActivePrewarm: Swift.Bool
  public init(launchTime: Foundation.TimeInterval?, launchDate: Foundation.Date, isActivePrewarm: Swift.Bool)
  public static func == (a: DatadogInternal.LaunchTime, b: DatadogInternal.LaunchTime) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TraceContext : Swift.Equatable {
  public let traceID: DatadogInternal.TraceID
  public let spanID: DatadogInternal.SpanID
  public let parentSpanID: DatadogInternal.SpanID?
  public let sampleRate: Swift.Float
  public let isKept: Swift.Bool
  public init(traceID: DatadogInternal.TraceID, spanID: DatadogInternal.SpanID, parentSpanID: DatadogInternal.SpanID?, sampleRate: Swift.Float, isKept: Swift.Bool)
  public static func == (a: DatadogInternal.TraceContext, b: DatadogInternal.TraceContext) -> Swift.Bool
}
public let profiler: any DatadogInternal.BenchmarkProfiler
public protocol BenchmarkProfiler {
  func tracer(operation: @autoclosure () -> Swift.String) -> any DatadogInternal.BenchmarkTracer
}
public protocol BenchmarkTracer {
  func startSpan(named: @autoclosure () -> Swift.String) -> any DatadogInternal.BenchmarkSpan
}
public protocol BenchmarkSpan {
  func stop()
}
public protocol FeatureMessageReceiver {
  @discardableResult
  func receive(message: DatadogInternal.FeatureMessage, from core: any DatadogInternal.DatadogCoreProtocol) -> Swift.Bool
}
public struct NOPFeatureMessageReceiver : DatadogInternal.FeatureMessageReceiver {
  public init()
  public func receive(message: DatadogInternal.FeatureMessage, from core: any DatadogInternal.DatadogCoreProtocol) -> Swift.Bool
}
public struct CombinedFeatureMessageReceiver : DatadogInternal.FeatureMessageReceiver {
  public init(_ receivers: any DatadogInternal.FeatureMessageReceiver...)
  public init(_ receivers: [any DatadogInternal.FeatureMessageReceiver])
  public func receive(message: DatadogInternal.FeatureMessage, from core: any DatadogInternal.DatadogCoreProtocol) -> Swift.Bool
}
public protocol Writer {
  func write<T, M>(value: T, metadata: M?) where T : Swift.Encodable, M : Swift.Encodable
}
extension DatadogInternal.Writer {
  public func write<T>(value: T) where T : Swift.Encodable
}
public struct ConfigurationTelemetry : Swift.Equatable {
  public let actionNameAttribute: Swift.String?
  public let allowFallbackToLocalStorage: Swift.Bool?
  public let allowUntrustedEvents: Swift.Bool?
  public let appHangThreshold: Swift.Int64?
  public let backgroundTasksEnabled: Swift.Bool?
  public let batchProcessingLevel: Swift.Int64?
  public let batchSize: Swift.Int64?
  public let batchUploadFrequency: Swift.Int64?
  public let dartVersion: Swift.String?
  public let forwardErrorsToLogs: Swift.Bool?
  public let defaultPrivacyLevel: Swift.String?
  public let textAndInputPrivacyLevel: Swift.String?
  public let imagePrivacyLevel: Swift.String?
  public let touchPrivacyLevel: Swift.String?
  public let initializationType: Swift.String?
  public let invTimeThresholdMs: Swift.Int64?
  public let mobileVitalsUpdatePeriod: Swift.Int64?
  public let reactNativeVersion: Swift.String?
  public let reactVersion: Swift.String?
  public let sessionReplaySampleRate: Swift.Int64?
  public let sessionSampleRate: Swift.Int64?
  public let silentMultipleInit: Swift.Bool?
  public let startRecordingImmediately: Swift.Bool?
  public let telemetryConfigurationSampleRate: Swift.Int64?
  public let telemetrySampleRate: Swift.Int64?
  public let tnsTimeThresholdMs: Swift.Int64?
  public let tracerAPI: Swift.String?
  public let tracerAPIVersion: Swift.String?
  public let traceSampleRate: Swift.Int64?
  public let trackBackgroundEvents: Swift.Bool?
  public let trackCrossPlatformLongTasks: Swift.Bool?
  public let trackErrors: Swift.Bool?
  public let trackFlutterPerformance: Swift.Bool?
  public let trackFrustrations: Swift.Bool?
  public let trackLongTask: Swift.Bool?
  public let trackNativeErrors: Swift.Bool?
  public let trackNativeLongTasks: Swift.Bool?
  public let trackNativeViews: Swift.Bool?
  public let trackNetworkRequests: Swift.Bool?
  public let trackResources: Swift.Bool?
  public let trackSessionAcrossSubdomains: Swift.Bool?
  public let trackUserInteractions: Swift.Bool?
  public let trackViewsManually: Swift.Bool?
  public let unityVersion: Swift.String?
  public let useAllowedTracingUrls: Swift.Bool?
  public let useBeforeSend: Swift.Bool?
  public let useExcludedActivityUrls: Swift.Bool?
  public let useFirstPartyHosts: Swift.Bool?
  public let useLocalEncryption: Swift.Bool?
  public let useProxy: Swift.Bool?
  public let useSecureSessionCookie: Swift.Bool?
  public let useTracing: Swift.Bool?
  public let useWorkerUrl: Swift.Bool?
  public static func == (a: DatadogInternal.ConfigurationTelemetry, b: DatadogInternal.ConfigurationTelemetry) -> Swift.Bool
}
public protocol SampledTelemetry {
  var sampleRate: DatadogInternal.SampleRate { get }
}
public struct MetricTelemetry : DatadogInternal.SampledTelemetry {
  public static let defaultSampleRate: DatadogInternal.SampleRate
  public let name: Swift.String
  public let attributes: [Swift.String : any Swift.Encodable]
  public let sampleRate: DatadogInternal.SampleRate
}
public struct UsageTelemetry : DatadogInternal.SampledTelemetry {
  public enum Event {
    case setTrackingConsent(DatadogInternal.TrackingConsent)
    case stopSession
    case startView
    case addAction
    case addError
    case setGlobalContext
    case setUser
    case addFeatureFlagEvaluation
    case addViewLoadingTime(DatadogInternal.UsageTelemetry.Event.ViewLoadingTime)
    public struct ViewLoadingTime {
      public let noActiveView: Swift.Bool
      public let noView: Swift.Bool
      public let overwritten: Swift.Bool
      public init(noActiveView: Swift.Bool, noView: Swift.Bool, overwritten: Swift.Bool)
    }
  }
  public static let defaultSampleRate: DatadogInternal.SampleRate
  public let event: DatadogInternal.UsageTelemetry.Event
  public let sampleRate: DatadogInternal.SampleRate
  public init(event: DatadogInternal.UsageTelemetry.Event, sampleRate: DatadogInternal.SampleRate = Self.defaultSampleRate)
}
public struct MethodCalledTrace {
}
public enum TelemetryMessage {
  case debug(id: Swift.String, message: Swift.String, attributes: [Swift.String : any Swift.Encodable]?)
  case error(id: Swift.String, message: Swift.String, kind: Swift.String, stack: Swift.String)
  case configuration(DatadogInternal.ConfigurationTelemetry)
  case metric(DatadogInternal.MetricTelemetry)
  case usage(DatadogInternal.UsageTelemetry)
}
public protocol Telemetry {
  func send(telemetry: DatadogInternal.TelemetryMessage)
}
extension DatadogInternal.Telemetry {
  public func startMethodCalled(operationName: Swift.String, callerClass: Swift.String, headSampleRate: DatadogInternal.SampleRate) -> DatadogInternal.MethodCalledTrace?
  public func stopMethodCalled(_ metric: DatadogInternal.MethodCalledTrace?, isSuccessful: Swift.Bool = true, tailSampleRate: DatadogInternal.SampleRate = MetricTelemetry.defaultSampleRate)
}
extension DatadogInternal.Telemetry {
  public func debug(id: Swift.String, message: Swift.String, attributes: [Swift.String : any Swift.Encodable]? = nil)
  public func error(id: Swift.String, message: Swift.String, kind: Swift.String, stack: Swift.String)
  public func report(configuration: DatadogInternal.ConfigurationTelemetry)
  public func debug(_ message: Swift.String, attributes: [Swift.String : any Swift.Encodable]? = nil, file: Swift.String = #fileID, line: Swift.Int = #line)
  public func error(_ message: Swift.String, kind: Swift.String? = nil, stack: Swift.String? = nil, file: Swift.String = #fileID, line: Swift.Int = #line)
  public func error(_ error: DatadogInternal.DDError, file: Swift.String = #fileID, line: Swift.Int = #line)
  public func error(_ message: Swift.String, error: DatadogInternal.DDError, file: Swift.String = #fileID, line: Swift.Int = #line)
  public func error(_ error: any Swift.Error, file: Swift.String = #fileID, line: Swift.Int = #line)
  public func error(_ message: Swift.String, error: any Swift.Error, file: Swift.String = #fileID, line: Swift.Int = #line)
  public func configuration(actionNameAttribute: Swift.String? = nil, allowFallbackToLocalStorage: Swift.Bool? = nil, allowUntrustedEvents: Swift.Bool? = nil, appHangThreshold: Swift.Int64? = nil, backgroundTasksEnabled: Swift.Bool? = nil, batchProcessingLevel: Swift.Int64? = nil, batchSize: Swift.Int64? = nil, batchUploadFrequency: Swift.Int64? = nil, dartVersion: Swift.String? = nil, forwardErrorsToLogs: Swift.Bool? = nil, defaultPrivacyLevel: Swift.String? = nil, textAndInputPrivacyLevel: Swift.String? = nil, imagePrivacyLevel: Swift.String? = nil, touchPrivacyLevel: Swift.String? = nil, initializationType: Swift.String? = nil, invTimeThresholdMs: Swift.Int64? = nil, mobileVitalsUpdatePeriod: Swift.Int64? = nil, reactNativeVersion: Swift.String? = nil, reactVersion: Swift.String? = nil, sessionReplaySampleRate: Swift.Int64? = nil, sessionSampleRate: Swift.Int64? = nil, silentMultipleInit: Swift.Bool? = nil, startRecordingImmediately: Swift.Bool? = nil, telemetryConfigurationSampleRate: Swift.Int64? = nil, telemetrySampleRate: Swift.Int64? = nil, tnsTimeThresholdMs: Swift.Int64? = nil, tracerAPI: Swift.String? = nil, tracerAPIVersion: Swift.String? = nil, traceSampleRate: Swift.Int64? = nil, trackBackgroundEvents: Swift.Bool? = nil, trackCrossPlatformLongTasks: Swift.Bool? = nil, trackErrors: Swift.Bool? = nil, trackFlutterPerformance: Swift.Bool? = nil, trackFrustrations: Swift.Bool? = nil, trackLongTask: Swift.Bool? = nil, trackNativeErrors: Swift.Bool? = nil, trackNativeLongTasks: Swift.Bool? = nil, trackNativeViews: Swift.Bool? = nil, trackNetworkRequests: Swift.Bool? = nil, trackResources: Swift.Bool? = nil, trackSessionAcrossSubdomains: Swift.Bool? = nil, trackUserInteractions: Swift.Bool? = nil, trackViewsManually: Swift.Bool? = nil, unityVersion: Swift.String? = nil, useAllowedTracingUrls: Swift.Bool? = nil, useBeforeSend: Swift.Bool? = nil, useExcludedActivityUrls: Swift.Bool? = nil, useFirstPartyHosts: Swift.Bool? = nil, useLocalEncryption: Swift.Bool? = nil, useProxy: Swift.Bool? = nil, useSecureSessionCookie: Swift.Bool? = nil, useTracing: Swift.Bool? = nil, useWorkerUrl: Swift.Bool? = nil)
  public func metric(name: Swift.String, attributes: [Swift.String : any Swift.Encodable], sampleRate: DatadogInternal.SampleRate = MetricTelemetry.defaultSampleRate)
}
public struct NOPTelemetry : DatadogInternal.Telemetry {
  public init()
  public func send(telemetry: DatadogInternal.TelemetryMessage)
  public func startMethodCalled(operationName: Swift.String, callerClass: Swift.String, samplingRate: Swift.Float) -> DatadogInternal.MethodCalledTrace?
  public func stopMethodCalled(_ metric: DatadogInternal.MethodCalledTrace?, isSuccessful: Swift.Bool)
}
extension DatadogInternal.DatadogCoreProtocol {
  public var telemetry: any DatadogInternal.Telemetry {
    get
  }
}
extension DatadogInternal.DatadogCoreProtocol {
  public var storage: any DatadogInternal.Storage {
    get
  }
}
extension DatadogInternal.ConfigurationTelemetry {
  public func merged(with other: DatadogInternal.ConfigurationTelemetry) -> DatadogInternal.ConfigurationTelemetry
}
public struct DataFormat {
  public init(prefix: Swift.String, suffix: Swift.String, separator: Swift.Character)
  public func format(_ data: [Foundation.Data]) -> Foundation.Data
}
public protocol DatadogURLSessionHandler {
  var firstPartyHosts: DatadogInternal.FirstPartyHosts { get }
  func modify(request: Foundation.URLRequest, headerTypes: Swift.Set<DatadogInternal.TracingHeaderType>) -> (Foundation.URLRequest, DatadogInternal.TraceContext?)
  func interceptionDidStart(interception: DatadogInternal.URLSessionTaskInterception)
  func interceptionDidComplete(interception: DatadogInternal.URLSessionTaskInterception)
}
extension DatadogInternal.DatadogCoreProtocol {
  public func register(urlSessionHandler: any DatadogInternal.DatadogURLSessionHandler) throws
}
public enum TracingHeaderType : Swift.Hashable {
  case datadog
  case b3
  case b3multi
  case tracecontext
  public static func == (a: DatadogInternal.TracingHeaderType, b: DatadogInternal.TracingHeaderType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@frozen public struct AnyEncodable : Swift.Encodable {
  public let value: Any
  public init<T>(_ value: T?)
}
@usableFromInline
internal protocol _AnyEncodable {
  var value: Any { get }
  init<T>(_ value: T?)
}
extension DatadogInternal.AnyEncodable : DatadogInternal._AnyEncodable {
}
extension DatadogInternal._AnyEncodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
extension DatadogInternal.AnyEncodable : Swift.Equatable {
  public static func == (lhs: DatadogInternal.AnyEncodable, rhs: DatadogInternal.AnyEncodable) -> Swift.Bool
}
public struct DatadogExtension<ExtendedType> {
  public var type: ExtendedType {
    get
  }
  public init(_ type: ExtendedType)
}
public protocol DatadogExtended {
  associatedtype ExtendedType
  static var dd: DatadogInternal.DatadogExtension<Self.ExtendedType>.Type { get set }
  var dd: DatadogInternal.DatadogExtension<Self.ExtendedType> { get set }
}
extension DatadogInternal.DatadogExtended {
  public static var dd: DatadogInternal.DatadogExtension<Self>.Type {
    get
    set
  }
  public var dd: DatadogInternal.DatadogExtension<Self> {
    get
    set
  }
}
extension Swift.Array : DatadogInternal.DatadogExtended {
  public typealias ExtendedType = Swift.Array<Element>
}
extension Swift.Dictionary : DatadogInternal.DatadogExtended {
  public typealias ExtendedType = Swift.Dictionary<Key, Value>
}
public protocol SysctlProviding {
  func model() throws -> Swift.String
  func osBuild() throws -> Swift.String
  func systemBootTime() throws -> Foundation.TimeInterval
  func isDebugging() throws -> Swift.Bool
}
public struct Sysctl : DatadogInternal.SysctlProviding {
  public init()
  public func model() throws -> Swift.String
  public func osBuild() throws -> Swift.String
  public func systemBootTime() throws -> Foundation.TimeInterval
  public func isDebugging() throws -> Swift.Bool
}
public struct ImmutableRequest {
  public let url: Foundation.URL?
  public let httpMethod: Swift.String?
  public let ddOriginHeaderValue: Swift.String?
  public let unsafeOriginal: Foundation.URLRequest
  public init(request: Foundation.URLRequest)
}
public protocol UploadPerformancePreset {
  var initialUploadDelay: Foundation.TimeInterval { get }
  var minUploadDelay: Foundation.TimeInterval { get }
  var maxUploadDelay: Foundation.TimeInterval { get }
  var uploadDelayChangeRate: Swift.Double { get }
  var maxBatchesPerUpload: Swift.Int { get }
}
public protocol AppStateProvider : Swift.Sendable {
  var current: DatadogInternal.AppState { get }
}
public enum AppState : Swift.Codable, DatadogInternal.PassthroughAnyCodable {
  case active
  case inactive
  case background
  case terminated
  public var isRunningInForeground: Swift.Bool {
    get
  }
  public static func == (a: DatadogInternal.AppState, b: DatadogInternal.AppState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct AppStateHistory : Swift.Codable, Swift.Equatable, DatadogInternal.PassthroughAnyCodable {
  public struct Snapshot : Swift.Codable, Swift.Equatable {
    public let state: DatadogInternal.AppState
    public let date: Foundation.Date
    public init(state: DatadogInternal.AppState, date: Foundation.Date)
    public static func == (a: DatadogInternal.AppStateHistory.Snapshot, b: DatadogInternal.AppStateHistory.Snapshot) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public var initialSnapshot: DatadogInternal.AppStateHistory.Snapshot {
    get
  }
  public var snapshots: [DatadogInternal.AppStateHistory.Snapshot] {
    get
  }
  public var recentDate: Foundation.Date {
    get
  }
  public var currentSnapshot: DatadogInternal.AppStateHistory.Snapshot {
    get
  }
  public init(initialSnapshot: DatadogInternal.AppStateHistory.Snapshot, recentDate: Foundation.Date, snapshots: [DatadogInternal.AppStateHistory.Snapshot] = [])
  public init(initialState: DatadogInternal.AppState, date: Foundation.Date, snapshots: [DatadogInternal.AppStateHistory.Snapshot] = [])
  public func take(between range: Swift.ClosedRange<Foundation.Date>) -> DatadogInternal.AppStateHistory
  public mutating func append(_ snapshot: DatadogInternal.AppStateHistory.Snapshot)
  public var foregroundDuration: Foundation.TimeInterval {
    get
  }
  public static func == (a: DatadogInternal.AppStateHistory, b: DatadogInternal.AppStateHistory) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension DatadogInternal.AppStateHistory {
  public static func active(since date: Foundation.Date) -> DatadogInternal.AppStateHistory
}
public struct DefaultAppStateProvider : DatadogInternal.AppStateProvider {
  public init()
  public var current: DatadogInternal.AppState {
    get
  }
}
extension DatadogInternal.AppState {
  public init(_ state: UIKit.UIApplication.State)
}
@_hasMissingDesignatedInitializers final public class CoreRegistry {
  public static var `default`: any DatadogInternal.DatadogCoreProtocol {
    get
  }
  public static let defaultInstanceName: Swift.String
  public static func register(default instance: any DatadogInternal.DatadogCoreProtocol)
  public static func register(_ instance: any DatadogInternal.DatadogCoreProtocol, named name: Swift.String)
  public static func isRegistered(instanceName: Swift.String) -> Swift.Bool
  @discardableResult
  public static func unregisterInstance(named name: Swift.String) -> (any DatadogInternal.DatadogCoreProtocol)?
  @discardableResult
  public static func unregisterDefault() -> (any DatadogInternal.DatadogCoreProtocol)?
  public static func instance(named name: Swift.String) -> any DatadogInternal.DatadogCoreProtocol
  public static func isFeatureEnabled<T>(feature: T.Type) -> Swift.Bool where T : DatadogInternal.DatadogFeature
  @objc deinit
}
public class W3CHTTPHeadersWriter : DatadogInternal.TracePropagationHeadersWriter {
  public var traceHeaderFields: [Swift.String : Swift.String] {
    get
  }
  @available(*, deprecated, message: "This will be removed in future versions of the SDK. Use `init(samplingStrategy: .custom(sampleRate:))` instead.")
  convenience public init(samplingRate: Swift.Float)
  @available(*, deprecated, message: "This will be removed in future versions of the SDK. Use `init(samplingStrategy: .custom(sampleRate:))` instead.")
  convenience public init(sampleRate: Swift.Float = 20, tracestate: [Swift.String : Swift.String] = [:])
  public init(samplingStrategy: DatadogInternal.TraceSamplingStrategy, tracestate: [Swift.String : Swift.String] = [:], traceContextInjection: DatadogInternal.TraceContextInjection = .all)
  public func write(traceContext: DatadogInternal.TraceContext)
  @objc deinit
}
public struct DeviceInfo : Swift.Codable, Swift.Equatable, DatadogInternal.PassthroughAnyCodable {
  public enum DeviceType : Swift.Codable, Swift.Equatable, DatadogInternal.PassthroughAnyCodable {
    case iPhone
    case iPod
    case iPad
    case appleTV
    case other(modelName: Swift.String, osName: Swift.String)
    public static func == (a: DatadogInternal.DeviceInfo.DeviceType, b: DatadogInternal.DeviceInfo.DeviceType) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public let brand: Swift.String
  public let name: Swift.String
  public let model: Swift.String
  public let type: DatadogInternal.DeviceInfo.DeviceType
  public let osName: Swift.String
  public let osVersion: Swift.String
  public let osVersionMajor: Swift.String
  public let osBuildNumber: Swift.String?
  public let architecture: Swift.String
  public let isSimulator: Swift.Bool
  public let vendorId: Swift.String?
  public let isDebugging: Swift.Bool
  public let systemBootTime: Foundation.TimeInterval
  public init(name: Swift.String, model: Swift.String, osName: Swift.String, osVersion: Swift.String, osBuildNumber: Swift.String?, architecture: Swift.String, isSimulator: Swift.Bool, vendorId: Swift.String?, isDebugging: Swift.Bool, systemBootTime: Foundation.TimeInterval)
  public static func == (a: DatadogInternal.DeviceInfo, b: DatadogInternal.DeviceInfo) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension DatadogInternal.DeviceInfo {
  public init(processInfo: Foundation.ProcessInfo, device: DatadogInternal._UIDevice = .dd.current, sysctl: any DatadogInternal.SysctlProviding = Sysctl())
}
public typealias _UIDevice = UIKit.UIDevice
extension UIKit.UIDevice : DatadogInternal.DatadogExtended {
  @available(iOS 2.0, *)
  public typealias ExtendedType = UIKit.UIDevice
}
extension DatadogInternal.DatadogExtension where ExtendedType == UIKit.UIDevice {
  public static var current: UIKit.UIDevice {
    get
  }
}
@available(*, deprecated, renamed: "B3HTTPHeadersReader")
public typealias OTelHTTPHeadersReader = DatadogInternal.B3HTTPHeadersReader
public class B3HTTPHeadersReader : DatadogInternal.TracePropagationHeadersReader {
  public init(httpHeaderFields: [Swift.String : Swift.String])
  public func read() -> (traceID: DatadogInternal.TraceID, spanID: DatadogInternal.SpanID, parentSpanID: DatadogInternal.SpanID?)?
  public var sampled: Swift.Bool? {
    get
  }
  @objc deinit
}
public struct InternalLogger : DatadogInternal.CoreLogger {
  public init(dateProvider: any DatadogInternal.DateProvider, timeZone: Foundation.TimeZone, printFunction: @escaping (Swift.String, DatadogInternal.CoreLoggerLevel) -> Swift.Void, verbosityLevel: @escaping () -> DatadogInternal.CoreLoggerLevel?)
  public func log(_ level: DatadogInternal.CoreLoggerLevel, message: @autoclosure () -> Swift.String, error: (any Swift.Error)?)
}
public enum BundleType : Swift.String {
  case iOSApp
  case iOSAppExtension
  public init(bundle: Foundation.Bundle)
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol DateFormatterType : Swift.Sendable {
  func string(from date: Foundation.Date) -> Swift.String
  func date(from string: Swift.String) -> Foundation.Date?
}
extension Foundation.ISO8601DateFormatter : DatadogInternal.DateFormatterType, @unchecked Swift.Sendable {
}
extension Foundation.DateFormatter : DatadogInternal.DateFormatterType, @unchecked Swift.Sendable {
}
public let iso8601DateFormatter: any DatadogInternal.DateFormatterType
public func presentationDateFormatter(withTimeZone timeZone: Foundation.TimeZone = .current) -> any DatadogInternal.DateFormatterType
public struct SpanID : Swift.RawRepresentable, Swift.Equatable, Swift.Hashable {
  public static let invalidId: Swift.UInt64
  public static let invalid: DatadogInternal.SpanID
  public enum Representation {
    case decimal
    case hexadecimal
    case hexadecimal16Chars
    case hexadecimal32Chars
    public static func == (a: DatadogInternal.SpanID.Representation, b: DatadogInternal.SpanID.Representation) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public let rawValue: Swift.UInt64
  public init(rawValue: Swift.UInt64)
  public init()
  public func toString(representation: DatadogInternal.SpanID.Representation) -> Swift.String
  public typealias RawValue = Swift.UInt64
}
extension DatadogInternal.SpanID {
  public init?(_ string: Swift.String, representation: DatadogInternal.SpanID.Representation = .decimal)
}
extension DatadogInternal.SpanID : Swift.ExpressibleByIntegerLiteral {
  public init(integerLiteral value: Swift.UInt64)
  public typealias IntegerLiteralType = Swift.UInt64
}
extension Swift.String {
  public init(_ spanID: DatadogInternal.SpanID, representation: DatadogInternal.SpanID.Representation = .decimal)
}
public protocol SpanIDGenerator {
  func generate() -> DatadogInternal.SpanID
}
public struct DefaultSpanIDGenerator : DatadogInternal.SpanIDGenerator {
  public static let defaultGenerationRange: (Swift.ClosedRange<Swift.UInt64>)
  public init(range: Swift.ClosedRange<Swift.UInt64> = Self.defaultGenerationRange)
  public func generate() -> DatadogInternal.SpanID
}
extension DatadogInternal.SpanID : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
final public class FeatureBaggage {
  public init<Value>(_ value: Value) where Value : Swift.Encodable
  final public func encode() throws -> Any?
  final public func decode<Value>(type: Value.Type = Value.self) throws -> Value where Value : Swift.Decodable
  @objc deinit
}
@frozen public struct AnyDecodable : Swift.Decodable {
  public let value: Any
  public init<T>(_ value: T?)
}
@usableFromInline
internal protocol _AnyDecodable {
  var value: Any { get }
  init<T>(_ value: T?)
}
extension DatadogInternal.AnyDecodable : DatadogInternal._AnyDecodable {
}
extension DatadogInternal._AnyDecodable {
  public init(from decoder: any Swift.Decoder) throws
}
extension DatadogInternal.AnyDecodable : Swift.Equatable {
  public static func == (lhs: DatadogInternal.AnyDecodable, rhs: DatadogInternal.AnyDecodable) -> Swift.Bool
}
public struct DDCrashReport : Swift.Codable, DatadogInternal.PassthroughAnyCodable {
  public struct Meta : Swift.Codable, DatadogInternal.PassthroughAnyCodable {
    public let incidentIdentifier: Swift.String?
    public let process: Swift.String?
    public let parentProcess: Swift.String?
    public let path: Swift.String?
    public let codeType: Swift.String?
    public let exceptionType: Swift.String?
    public let exceptionCodes: Swift.String?
    public init(incidentIdentifier: Swift.String?, process: Swift.String?, parentProcess: Swift.String?, path: Swift.String?, codeType: Swift.String?, exceptionType: Swift.String?, exceptionCodes: Swift.String?)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public let date: Foundation.Date?
  public let type: Swift.String
  public let message: Swift.String
  public let stack: Swift.String
  public let threads: [DatadogInternal.DDThread]
  public let binaryImages: [DatadogInternal.BinaryImage]
  public let meta: DatadogInternal.DDCrashReport.Meta
  public let wasTruncated: Swift.Bool
  public let context: Foundation.Data?
  public let additionalAttributes: DatadogInternal.AnyCodable
  public init(date: Foundation.Date?, type: Swift.String, message: Swift.String, stack: Swift.String, threads: [DatadogInternal.DDThread], binaryImages: [DatadogInternal.BinaryImage], meta: DatadogInternal.DDCrashReport.Meta, wasTruncated: Swift.Bool, context: Foundation.Data?, additionalAttributes: [Swift.String : any Swift.Encodable]?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class URLSessionTaskInterception {
  final public let identifier: Foundation.UUID
  public var request: DatadogInternal.ImmutableRequest {
    get
  }
  final public let isFirstPartyRequest: Swift.Bool
  public var metrics: DatadogInternal.ResourceMetrics? {
    get
  }
  public var data: Foundation.Data? {
    get
  }
  public var completion: DatadogInternal.ResourceCompletion? {
    get
  }
  public var trace: DatadogInternal.TraceContext? {
    get
  }
  public var origin: Swift.String? {
    get
  }
  public func register(trace: DatadogInternal.TraceContext)
  public func register(origin: Swift.String)
  public var isDone: Swift.Bool {
    get
  }
  @objc deinit
}
public struct ResourceCompletion {
  public let httpResponse: Foundation.HTTPURLResponse?
  public let error: (any Swift.Error)?
  public init(response: Foundation.URLResponse?, error: (any Swift.Error)?)
}
public struct ResourceMetrics {
  public struct DateInterval {
    public let start: Foundation.Date, end: Foundation.Date
    public var duration: Foundation.TimeInterval {
      get
    }
    public static func create(start: Foundation.Date?, end: Foundation.Date?) -> DatadogInternal.ResourceMetrics.DateInterval?
    public init(start: Foundation.Date, end: Foundation.Date)
  }
  public let fetch: DatadogInternal.ResourceMetrics.DateInterval
  public let redirection: DatadogInternal.ResourceMetrics.DateInterval?
  public let dns: DatadogInternal.ResourceMetrics.DateInterval?
  public let connect: DatadogInternal.ResourceMetrics.DateInterval?
  public let ssl: DatadogInternal.ResourceMetrics.DateInterval?
  public let firstByte: DatadogInternal.ResourceMetrics.DateInterval?
  public let download: DatadogInternal.ResourceMetrics.DateInterval?
  public let responseSize: Swift.Int64?
  public init(fetch: DatadogInternal.ResourceMetrics.DateInterval, redirection: DatadogInternal.ResourceMetrics.DateInterval?, dns: DatadogInternal.ResourceMetrics.DateInterval?, connect: DatadogInternal.ResourceMetrics.DateInterval?, ssl: DatadogInternal.ResourceMetrics.DateInterval?, firstByte: DatadogInternal.ResourceMetrics.DateInterval?, download: DatadogInternal.ResourceMetrics.DateInterval?, responseSize: Swift.Int64?)
}
extension DatadogInternal.ResourceMetrics {
  public init(taskMetrics: Foundation.URLSessionTaskMetrics)
}
public typealias ThreadID = Darwin.thread_t
extension Foundation.Thread {
  public static var currentThreadID: DatadogInternal.ThreadID {
    get
  }
}
public protocol BacktraceReporting : Swift.Sendable {
  func generateBacktrace(threadID: DatadogInternal.ThreadID) throws -> DatadogInternal.BacktraceReport?
}
extension DatadogInternal.BacktraceReporting {
  public func generateBacktrace() throws -> DatadogInternal.BacktraceReport?
}
extension DatadogInternal.DatadogCoreProtocol {
  public func register(backtraceReporter: any DatadogInternal.BacktraceReporting) throws
  public var backtraceReporter: any DatadogInternal.BacktraceReporting {
    get
  }
}
public struct DD {
  public static var logger: any DatadogInternal.CoreLogger
}
public var consolePrint: @Sendable (_ message: Swift.String, _ level: DatadogInternal.CoreLoggerLevel) -> Swift.Void
public struct FirstPartyHosts : Swift.Equatable {
  public var hosts: Swift.Set<Swift.String> {
    get
  }
  public init(_ hostsWithTracingHeaderTypes: [Swift.String : Swift.Set<DatadogInternal.TracingHeaderType>])
  public init(_ hosts: Swift.Set<Swift.String>)
  public init()
  public func tracingHeaderTypes(for url: Foundation.URL?) -> Swift.Set<DatadogInternal.TracingHeaderType>
  public func isFirstParty(url: Foundation.URL?) -> Swift.Bool
  public func isFirstParty(string: Swift.String) -> Swift.Bool
  public static func == (a: DatadogInternal.FirstPartyHosts, b: DatadogInternal.FirstPartyHosts) -> Swift.Bool
}
public func += (left: inout DatadogInternal.FirstPartyHosts?, right: DatadogInternal.FirstPartyHosts)
public func + (left: DatadogInternal.FirstPartyHosts, right: DatadogInternal.FirstPartyHosts?) -> DatadogInternal.FirstPartyHosts
public protocol TracePropagationHeadersReader {
  func read() -> (traceID: DatadogInternal.TraceID, spanID: DatadogInternal.SpanID, parentSpanID: DatadogInternal.SpanID?)?
  var sampled: Swift.Bool? { get }
}
@propertyWrapper final public class ReadWriteLock<Value> : @unchecked Swift.Sendable {
  public init(wrappedValue value: Value)
  @objc deinit
  final public var wrappedValue: Value {
    get
    set
  }
  final public func mutate(_ closure: (inout Value) throws -> Swift.Void) rethrows
}
public class W3CHTTPHeadersReader : DatadogInternal.TracePropagationHeadersReader {
  public init(httpHeaderFields: [Swift.String : Swift.String])
  public func read() -> (traceID: DatadogInternal.TraceID, spanID: DatadogInternal.SpanID, parentSpanID: DatadogInternal.SpanID?)?
  public var sampled: Swift.Bool? {
    get
  }
  @objc deinit
}
public enum MethodCalledMetric {
  public static let name: Swift.String
  public static let typeValue: Swift.String
  public static let operationName: Swift.String
  public static let callerClass: Swift.String
  public static let isSuccessful: Swift.String
  public static let executionTime: Swift.String
}
public struct DatadogContext {
  public let site: DatadogInternal.DatadogSite
  public let clientToken: Swift.String
  public let service: Swift.String
  public let env: Swift.String
  public var version: Swift.String
  public let buildNumber: Swift.String
  public let buildId: Swift.String?
  public let variant: Swift.String?
  public let source: Swift.String
  public let nativeSourceOverride: Swift.String?
  public let sdkVersion: Swift.String
  public let ciAppOrigin: Swift.String?
  public var serverTimeOffset: Foundation.TimeInterval
  public let applicationName: Swift.String
  public let applicationBundleIdentifier: Swift.String
  public let applicationBundleType: DatadogInternal.BundleType
  public let sdkInitDate: Foundation.Date
  public var device: DatadogInternal.DeviceInfo
  public var userInfo: DatadogInternal.UserInfo?
  public var trackingConsent: DatadogInternal.TrackingConsent
  public var launchTime: DatadogInternal.LaunchTime
  public var applicationStateHistory: DatadogInternal.AppStateHistory
  public var networkConnectionInfo: DatadogInternal.NetworkConnectionInfo?
  public var carrierInfo: DatadogInternal.CarrierInfo?
  public var batteryStatus: DatadogInternal.BatteryStatus?
  public var isLowPowerModeEnabled: Swift.Bool
  public var baggages: [Swift.String : DatadogInternal.FeatureBaggage]
  public init(site: DatadogInternal.DatadogSite, clientToken: Swift.String, service: Swift.String, env: Swift.String, version: Swift.String, buildNumber: Swift.String, buildId: Swift.String?, variant: Swift.String?, source: Swift.String, sdkVersion: Swift.String, ciAppOrigin: Swift.String?, serverTimeOffset: Foundation.TimeInterval = .zero, applicationName: Swift.String, applicationBundleIdentifier: Swift.String, applicationBundleType: DatadogInternal.BundleType, sdkInitDate: Foundation.Date, device: DatadogInternal.DeviceInfo, nativeSourceOverride: Swift.String? = nil, userInfo: DatadogInternal.UserInfo? = nil, trackingConsent: DatadogInternal.TrackingConsent = .pending, launchTime: DatadogInternal.LaunchTime, applicationStateHistory: DatadogInternal.AppStateHistory, networkConnectionInfo: DatadogInternal.NetworkConnectionInfo? = nil, carrierInfo: DatadogInternal.CarrierInfo? = nil, batteryStatus: DatadogInternal.BatteryStatus? = nil, isLowPowerModeEnabled: Swift.Bool = false, baggages: [Swift.String : DatadogInternal.FeatureBaggage] = [:])
}
extension Foundation.Thread : DatadogInternal.DatadogExtended {
  public typealias ExtendedType = Foundation.Thread
}
extension DatadogInternal.DatadogExtension where ExtendedType : Foundation.Thread {
  public var name: Swift.String {
    get
  }
}
public enum DatadogSite : Swift.String {
  case us1
  case us3
  case us5
  case eu1
  case ap1
  case us1_fed
  @available(*, deprecated, message: "Renamed to us1")
  public static let us: DatadogInternal.DatadogSite
  @available(*, deprecated, message: "Renamed to eu1")
  public static let eu: DatadogInternal.DatadogSite
  @available(*, deprecated, message: "Renamed to us1_fed")
  public static let gov: DatadogInternal.DatadogSite
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension DatadogInternal.DatadogSite {
  public var endpoint: Foundation.URL {
    get
  }
}
extension Foundation.Data {
  public func sha1() -> Swift.String
}
extension Foundation.JSONEncoder : DatadogInternal.DatadogExtended {
  @available(iOS 8.0, tvOS 9.0, watchOS 2.0, macOS 10.10, *)
  public typealias ExtendedType = Foundation.JSONEncoder
}
extension DatadogInternal.DatadogExtension where ExtendedType == Foundation.JSONEncoder {
  public static func `default`() -> Foundation.JSONEncoder
}
public typealias DataStoreKeyVersion = Swift.UInt16
public let dataStoreDefaultKeyVersion: DatadogInternal.DataStoreKeyVersion
public enum DataStoreValueResult {
  case value(Foundation.Data, DatadogInternal.DataStoreKeyVersion)
  case noValue
  case error(any Swift.Error)
  public func data(expectedVersion: DatadogInternal.DataStoreKeyVersion = dataStoreDefaultKeyVersion) -> Foundation.Data?
}
public protocol DataStore {
  func setValue(_ value: Foundation.Data, forKey key: Swift.String, version: DatadogInternal.DataStoreKeyVersion)
  func value(forKey key: Swift.String, callback: @escaping (DatadogInternal.DataStoreValueResult) -> Swift.Void)
  func removeValue(forKey key: Swift.String)
  func clearAllData()
  func flush()
}
extension DatadogInternal.DataStore {
  public func setValue(_ value: Foundation.Data, forKey key: Swift.String)
}
public struct NOPDataStore : DatadogInternal.DataStore {
  public init()
  public func setValue(_ value: Foundation.Data, forKey key: Swift.String, version: DatadogInternal.DataStoreKeyVersion)
  public func value(forKey key: Swift.String, callback: @escaping (DatadogInternal.DataStoreValueResult) -> Swift.Void)
  public func removeValue(forKey key: Swift.String)
  public func clearAllData()
  public func flush()
}
public struct LaunchReport : Swift.Codable, DatadogInternal.PassthroughAnyCodable {
  public static let baggageKey: Swift.String
  public let didCrash: Swift.Bool
  public init(didCrash: Swift.Bool)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension DatadogInternal.LaunchReport : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
@available(*, deprecated, renamed: "B3HTTPHeadersWriter")
public typealias OTelHTTPHeadersWriter = DatadogInternal.B3HTTPHeadersWriter
public class B3HTTPHeadersWriter : DatadogInternal.TracePropagationHeadersWriter {
  public enum InjectEncoding {
    case multiple
    case single
    public static func == (a: DatadogInternal.B3HTTPHeadersWriter.InjectEncoding, b: DatadogInternal.B3HTTPHeadersWriter.InjectEncoding) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var traceHeaderFields: [Swift.String : Swift.String] {
    get
  }
  @available(*, deprecated, message: "This will be removed in future versions of the SDK. Use `init(samplingStrategy: .custom(sampleRate:))` instead.")
  convenience public init(samplingRate: Swift.Float, injectEncoding: DatadogInternal.B3HTTPHeadersWriter.InjectEncoding = .single)
  @available(*, deprecated, message: "This will be removed in future versions of the SDK. Use `init(samplingStrategy: .custom(sampleRate:))` instead.")
  convenience public init(sampleRate: Swift.Float = 20, injectEncoding: DatadogInternal.B3HTTPHeadersWriter.InjectEncoding = .single)
  public init(samplingStrategy: DatadogInternal.TraceSamplingStrategy, injectEncoding: DatadogInternal.B3HTTPHeadersWriter.InjectEncoding = .single, traceContextInjection: DatadogInternal.TraceContextInjection = .all)
  public func write(traceContext: DatadogInternal.TraceContext)
  @objc deinit
}
public struct UserInfo : Swift.Codable, DatadogInternal.PassthroughAnyCodable {
  public var anonymousId: Swift.String?
  public let id: Swift.String?
  public let name: Swift.String?
  public let email: Swift.String?
  public var extraInfo: [DatadogInternal.AttributeKey : any Swift.Encodable]
  public init(anonymousId: Swift.String? = nil, id: Swift.String? = nil, name: Swift.String? = nil, email: Swift.String? = nil, extraInfo: [DatadogInternal.AttributeKey : any Swift.Encodable] = [:])
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension DatadogInternal.UserInfo {
  public static var empty: DatadogInternal.UserInfo {
    get
  }
}
public struct URLRequestBuilder {
  public enum QueryItem {
    case ddsource(source: Swift.String)
    case ddtags(tags: [Swift.String])
  }
  public struct HTTPHeader {
    public static let contentTypeHeaderField: Swift.String
    public static let contentEncodingHeaderField: Swift.String
    public static let userAgentHeaderField: Swift.String
    public static let ddAPIKeyHeaderField: Swift.String
    public static let ddEVPOriginHeaderField: Swift.String
    public static let ddEVPOriginVersionHeaderField: Swift.String
    public static let ddRequestIDHeaderField: Swift.String
    public static let ddIdempotencyKeyHeaderField: Swift.String
    public enum ContentType {
      case applicationJSON
      case textPlainUTF8
      case multipartFormData(boundary: Swift.String)
      public var toString: Swift.String {
        get
      }
    }
    public init(field: Swift.String, value: @escaping () -> Swift.String)
    public static func contentTypeHeader(contentType: DatadogInternal.URLRequestBuilder.HTTPHeader.ContentType) -> DatadogInternal.URLRequestBuilder.HTTPHeader
    public static func userAgentHeader(appName: Swift.String, appVersion: Swift.String, device: DatadogInternal.DeviceInfo) -> DatadogInternal.URLRequestBuilder.HTTPHeader
    public static func ddAPIKeyHeader(clientToken: Swift.String) -> DatadogInternal.URLRequestBuilder.HTTPHeader
    public static func ddEVPOriginHeader(source: Swift.String) -> DatadogInternal.URLRequestBuilder.HTTPHeader
    public static func ddEVPOriginVersionHeader(sdkVersion: Swift.String) -> DatadogInternal.URLRequestBuilder.HTTPHeader
    public static func ddRequestIDHeader() -> DatadogInternal.URLRequestBuilder.HTTPHeader
    public static func ddIdempotencyKeyHeader(key: Swift.String) -> DatadogInternal.URLRequestBuilder.HTTPHeader
  }
  public init(url: Foundation.URL, queryItems: [DatadogInternal.URLRequestBuilder.QueryItem], headers: [DatadogInternal.URLRequestBuilder.HTTPHeader], telemetry: any DatadogInternal.Telemetry = NOPTelemetry())
  public func uploadRequest(with body: Foundation.Data, compress: Swift.Bool = true) -> Foundation.URLRequest
}
public enum TraceContextInjection : Swift.CaseIterable {
  case all
  case sampled
  public static func == (a: DatadogInternal.TraceContextInjection, b: DatadogInternal.TraceContextInjection) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [DatadogInternal.TraceContextInjection]
  nonisolated public static var allCases: [DatadogInternal.TraceContextInjection] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public typealias AttributeKey = Swift.String
public typealias AttributeValue = Swift.Encodable
public struct CrossPlatformAttributes {
  public static let version: Swift.String
  public static let sdkVersion: Swift.String
  public static let ddsource: Swift.String
  public static let variant: Swift.String
  public static let buildId: Swift.String
  public static let timestampInMilliseconds: Swift.String
  public static let errorSourceType: Swift.String
  public static let errorIsCrash: Swift.String
  public static let traceID: Swift.String
  public static let spanID: Swift.String
  public static let rulePSR: Swift.String
  public static let errorLogIsCrash: Swift.String
  public static let graphqlOperationName: Swift.String
  public static let graphqlOperationType: Swift.String
  public static let graphqlPayload: Swift.String
  public static let graphqlVariables: Swift.String
  public static let nativeSourceType: Swift.String
  public static let includeBinaryImages: Swift.String
  public static let flutterFirstBuildComplete: Swift.String
  public static let customINVValue: Swift.String
}
public struct LaunchArguments {
  public static let Debug: Swift.String
}
extension DatadogInternal.DatadogExtension where ExtendedType == [Swift.String : Any] {
  public var swiftAttributes: [Swift.String : any Swift.Encodable] {
    get
  }
}
extension DatadogInternal.DatadogExtension where ExtendedType == [Swift.String : any Swift.Encodable] {
  public var objCAttributes: [Swift.String : Any] {
    get
  }
}
extension Swift.Encodable {
  public var dd: DatadogInternal.DatadogExtension<any Swift.Encodable> {
    get
  }
}
extension DatadogInternal.DatadogExtension where ExtendedType == any Swift.Encodable {
  public func decode<T>(_: T.Type = T.self) -> T?
}
public typealias SampleRate = Swift.Float
public protocol Sampling {
  func sample() -> Swift.Bool
}
public struct Sampler : DatadogInternal.Sampling {
  public let samplingRate: DatadogInternal.SampleRate
  public init(samplingRate: DatadogInternal.SampleRate)
  public func sample() -> Swift.Bool
}
extension Swift.Float {
  public static let maxSampleRate: Swift.Float
  public var percentageProportion: Swift.Float {
    get
  }
  public func composed(with sampleRate: DatadogInternal.SampleRate) -> Swift.Float
}
public enum TraceSamplingStrategy {
  case headBased
  case custom(sampleRate: Swift.Float)
}
public protocol TracePropagationHeadersWriter {
  var traceHeaderFields: [Swift.String : Swift.String] { get }
  func write(traceContext: DatadogInternal.TraceContext)
}
open class AnyDecoder {
  public init()
  open func decode<T>(_ type: T.Type = T.self, from any: Any?) throws -> T where T : Swift.Decodable
  @objc deinit
}
public enum FeatureMessage {
  case baggage(key: Swift.String, baggage: DatadogInternal.FeatureBaggage)
  case webview(DatadogInternal.WebViewMessage)
  case context(DatadogInternal.DatadogContext)
  case telemetry(DatadogInternal.TelemetryMessage)
}
extension DatadogInternal.FeatureMessage {
  public static func baggage<Value>(key: Swift.String, value: Value) -> DatadogInternal.FeatureMessage where Value : Swift.Encodable
  public func baggage<Value>(forKey key: Swift.String, type: Value.Type = Value.self) throws -> Value? where Value : Swift.Decodable
}
public protocol HostsSanitizing {
  func sanitized(hosts: Swift.Set<Swift.String>, warningMessage: Swift.String) -> Swift.Set<Swift.String>
  func sanitized(hostsWithTracingHeaderTypes: [Swift.String : Swift.Set<DatadogInternal.TracingHeaderType>], warningMessage: Swift.String) -> [Swift.String : Swift.Set<DatadogInternal.TracingHeaderType>]
}
public struct HostsSanitizer : DatadogInternal.HostsSanitizing {
  public init()
  public func sanitized(hosts: Swift.Set<Swift.String>, warningMessage: Swift.String) -> Swift.Set<Swift.String>
  public func sanitized(hostsWithTracingHeaderTypes: [Swift.String : Swift.Set<DatadogInternal.TracingHeaderType>], warningMessage: Swift.String) -> [Swift.String : Swift.Set<DatadogInternal.TracingHeaderType>]
}
extension Swift.FixedWidthInteger {
  public var KB: Self {
    get
  }
  public var MB: Self {
    get
  }
  public var GB: Self {
    get
  }
  public var bytes: Self {
    get
  }
  public func asUInt64() -> Swift.UInt64
  public func asUInt32() -> Swift.UInt32
}
public struct URLSessionInterceptor {
  public static func shared(in core: any DatadogInternal.DatadogCoreProtocol = CoreRegistry.default) -> DatadogInternal.URLSessionInterceptor?
  public func intercept(request: Foundation.URLRequest, additionalFirstPartyHosts: DatadogInternal.FirstPartyHosts? = nil) -> Foundation.URLRequest
  public func intercept(task: Foundation.URLSessionTask, additionalFirstPartyHosts: DatadogInternal.FirstPartyHosts? = nil)
  public func task(_ task: Foundation.URLSessionTask, didFinishCollecting metrics: Foundation.URLSessionTaskMetrics)
  public func task(_ task: Foundation.URLSessionTask, didReceive data: Foundation.Data)
  public func task(_ task: Foundation.URLSessionTask, didCompleteWithError error: (any Swift.Error)?)
}
public protocol Storage {
  func mostRecentModifiedFileAt(before: Foundation.Date) throws -> Foundation.Date?
}
public protocol DateProvider : Swift.Sendable {
  var now: Foundation.Date { get }
}
public struct SystemDateProvider : DatadogInternal.DateProvider {
  public init()
  public var now: Foundation.Date {
    get
  }
}
public protocol DatadogCoreProtocol : AnyObject, DatadogInternal.BaggageSharing, DatadogInternal.MessageSending, DatadogInternal.Storage {
  func register<T>(feature: T) throws where T : DatadogInternal.DatadogFeature
  func feature<T>(named name: Swift.String, type: T.Type) -> T?
  func scope<T>(for featureType: T.Type) -> any DatadogInternal.FeatureScope where T : DatadogInternal.DatadogFeature
}
public protocol MessageSending {
  func send(message: DatadogInternal.FeatureMessage, else fallback: @escaping () -> Swift.Void)
}
public protocol BaggageSharing {
  func set(baggage: @escaping () -> DatadogInternal.FeatureBaggage?, forKey key: Swift.String)
}
extension DatadogInternal.DatadogCoreProtocol {
  public func get<T>(feature type: T.Type = T.self) -> T? where T : DatadogInternal.DatadogFeature
}
extension DatadogInternal.MessageSending {
  public func send(message: DatadogInternal.FeatureMessage)
}
extension DatadogInternal.BaggageSharing {
  public func set(baggage: DatadogInternal.FeatureBaggage?, forKey key: Swift.String)
  public func set<Baggage>(baggage: Baggage?, forKey key: Swift.String) where Baggage : Swift.Encodable
  public func set<Baggage>(baggage: @escaping () -> Baggage?, forKey key: Swift.String) where Baggage : Swift.Encodable
}
public protocol AnonymousIdentifierManaging {
  func set(anonymousId: Swift.String?)
}
public protocol FeatureScope : DatadogInternal.AnonymousIdentifierManaging, DatadogInternal.BaggageSharing, DatadogInternal.MessageSending, Swift.Sendable {
  func eventWriteContext(bypassConsent: Swift.Bool, _ block: @escaping (DatadogInternal.DatadogContext, any DatadogInternal.Writer) -> Swift.Void)
  func context(_ block: @escaping (DatadogInternal.DatadogContext) -> Swift.Void)
  var dataStore: any DatadogInternal.DataStore { get }
  var telemetry: any DatadogInternal.Telemetry { get }
}
extension DatadogInternal.FeatureScope {
  public func eventWriteContext(_ block: @escaping (DatadogInternal.DatadogContext, any DatadogInternal.Writer) -> Swift.Void)
  public func dataStoreContext(_ block: @escaping (DatadogInternal.DatadogContext, any DatadogInternal.DataStore) -> Swift.Void)
}
public class NOPDatadogCore : DatadogInternal.DatadogCoreProtocol {
  public init()
  public func register<T>(feature: T) throws where T : DatadogInternal.DatadogFeature
  public func feature<T>(named name: Swift.String, type: T.Type) -> T?
  public func scope<T>(for featureType: T.Type) -> any DatadogInternal.FeatureScope
  public func set(baggage: @escaping () -> DatadogInternal.FeatureBaggage?, forKey key: Swift.String)
  public func send(message: DatadogInternal.FeatureMessage, else fallback: @escaping () -> Swift.Void)
  public func mostRecentModifiedFileAt(before: Foundation.Date) throws -> Foundation.Date?
  @objc deinit
}
public struct NOPFeatureScope : DatadogInternal.FeatureScope {
  public init()
  public func eventWriteContext(bypassConsent: Swift.Bool, _ block: @escaping (DatadogInternal.DatadogContext, any DatadogInternal.Writer) -> Swift.Void)
  public func context(_ block: @escaping (DatadogInternal.DatadogContext) -> Swift.Void)
  public var dataStore: any DatadogInternal.DataStore {
    get
  }
  public var telemetry: any DatadogInternal.Telemetry {
    get
  }
  public func send(message: DatadogInternal.FeatureMessage, else fallback: @escaping () -> Swift.Void)
  public func set(baggage: @escaping () -> DatadogInternal.FeatureBaggage?, forKey key: Swift.String)
  public func set(anonymousId: Swift.String?)
}
public let SessionReplayFeaturneName: Swift.String
public enum SessionReplayPrivacyLevel : Swift.String {
  case allow
  case mask
  case maskUserInput
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum TextAndInputPrivacyLevel : Swift.String, Swift.CaseIterable {
  case maskSensitiveInputs
  case maskAllInputs
  case maskAll
  public init?(rawValue: Swift.String)
  public typealias AllCases = [DatadogInternal.TextAndInputPrivacyLevel]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [DatadogInternal.TextAndInputPrivacyLevel] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum ImagePrivacyLevel : Swift.String {
  case maskNonBundledOnly
  case maskAll
  case maskNone
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum TouchPrivacyLevel : Swift.String {
  case show
  case hide
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol SessionReplayConfiguration {
  var textAndInputPrivacyLevel: DatadogInternal.TextAndInputPrivacyLevel { get }
  var imagePrivacyLevel: DatadogInternal.ImagePrivacyLevel { get }
  var touchPrivacyLevel: DatadogInternal.TouchPrivacyLevel { get }
}
extension DatadogInternal.DatadogFeature where Self : DatadogInternal.SessionReplayConfiguration {
  public static var name: Swift.String {
    get
  }
}
public struct BinaryImage : Swift.Codable, DatadogInternal.PassthroughAnyCodable {
  public let libraryName: Swift.String
  public let uuid: Swift.String
  public let architecture: Swift.String
  public let isSystemLibrary: Swift.Bool
  public let loadAddress: Swift.String
  public let maxAddress: Swift.String
  public init(libraryName: Swift.String, uuid: Swift.String, architecture: Swift.String, isSystemLibrary: Swift.Bool, loadAddress: Swift.String, maxAddress: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension DatadogInternal.BinaryImage : Swift.Equatable {
  public static func == (a: DatadogInternal.BinaryImage, b: DatadogInternal.BinaryImage) -> Swift.Bool
}
public enum SDKMetricFields {
  public static let typeKey: Swift.String
  public static let headSampleRate: Swift.String
  public static let sessionIDOverrideKey: Swift.String
}
open class AnyEncoder {
  public init()
  open func encode<T>(_ value: T) throws -> Any? where T : Swift.Encodable
  @objc deinit
}
public protocol PassthroughAnyCodable {
}
extension Foundation.URL : DatadogInternal.PassthroughAnyCodable {
}
extension Foundation.Date : DatadogInternal.PassthroughAnyCodable {
}
extension Foundation.UUID : DatadogInternal.PassthroughAnyCodable {
}
extension Foundation.Data : DatadogInternal.PassthroughAnyCodable {
}
#if compiler(>=5.3) && $NoncopyableGenerics
extension Swift.Optional {
  public func ifNotNil(_ closure: (Wrapped) throws -> Swift.Void) rethrows
}
#else
extension Swift.Optional {
  public func ifNotNil(_ closure: (Wrapped) throws -> Swift.Void) rethrows
}
#endif
extension Swift.Double {
  public func divideIfNotZero(by divider: Swift.Double) -> Swift.Double?
  public var inverted: Swift.Double {
    get
  }
}
extension Foundation.UUID {
  public static let nullUUID: Foundation.UUID
}
extension Swift.Double {
  public init(fromMilliseconds milliseconds: Swift.Int64)
  public init(fromNanoseconds nanoseconds: Swift.Int64)
  public var toMilliseconds: Swift.UInt64 {
    get
  }
  public var toInt64Milliseconds: Swift.Int64 {
    get
  }
  public var toNanoseconds: Swift.UInt64 {
    get
  }
  public var toInt64Nanoseconds: Swift.Int64 {
    get
  }
}
public enum FixedWidthIntegerError<T> : Swift.Error where T : Swift.BinaryFloatingPoint {
  case overflow(overflowingValue: T)
}
extension Swift.FixedWidthInteger {
  public init<T>(withReportingOverflow floatingPoint: T) throws where T : Swift.BinaryFloatingPoint
  public init<T>(withNoOverflow floatingPoint: T) where T : Swift.BinaryFloatingPoint
}
extension Swift.Array {
  public subscript(safe index: Swift.Array<Element>.Index) -> Element? {
    get
  }
}
extension Foundation.Bundle {
  public var isSwiftUI: Swift.Bool {
    get
  }
  public var isUIKit: Swift.Bool {
    get
  }
}
public struct Event : Swift.Equatable {
  public let data: Foundation.Data
  public let metadata: Foundation.Data?
  public init(data: Foundation.Data, metadata: Foundation.Data? = nil)
  public static func == (a: DatadogInternal.Event, b: DatadogInternal.Event) -> Swift.Bool
}
extension DatadogInternal.Event : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension Foundation.URLSessionTask : DatadogInternal.DatadogExtended {
  @available(iOS 7.0, *)
  public typealias ExtendedType = Foundation.URLSessionTask
}
extension Swift.Double {
  public var seconds: Foundation.TimeInterval {
    get
  }
  public var minutes: Foundation.TimeInterval {
    get
  }
  public var hours: Foundation.TimeInterval {
    get
  }
  public var days: Foundation.TimeInterval {
    get
  }
}
extension Swift.FixedWidthInteger {
  public var seconds: Foundation.TimeInterval {
    get
  }
  public var minutes: Foundation.TimeInterval {
    get
  }
  public var hours: Foundation.TimeInterval {
    get
  }
  public var days: Foundation.TimeInterval {
    get
  }
}
extension DatadogInternal.CoreLoggerLevel : Swift.Hashable {}
extension DatadogInternal.CoreLoggerLevel : Swift.RawRepresentable {}
extension DatadogInternal.NetworkConnectionInfo.Reachability : Swift.Equatable {}
extension DatadogInternal.NetworkConnectionInfo.Reachability : Swift.Hashable {}
extension DatadogInternal.NetworkConnectionInfo.Reachability : Swift.RawRepresentable {}
extension DatadogInternal.NetworkConnectionInfo.Interface : Swift.Equatable {}
extension DatadogInternal.NetworkConnectionInfo.Interface : Swift.Hashable {}
extension DatadogInternal.NetworkConnectionInfo.Interface : Swift.RawRepresentable {}
extension DatadogInternal.TrackingConsent : Swift.Equatable {}
extension DatadogInternal.TrackingConsent : Swift.Hashable {}
extension DatadogInternal.CarrierInfo.RadioAccessTechnology : Swift.Equatable {}
extension DatadogInternal.CarrierInfo.RadioAccessTechnology : Swift.Hashable {}
extension DatadogInternal.CarrierInfo.RadioAccessTechnology : Swift.RawRepresentable {}
extension DatadogInternal.TraceID.Representation : Swift.Equatable {}
extension DatadogInternal.TraceID.Representation : Swift.Hashable {}
extension DatadogInternal.BatteryStatus.State : Swift.Equatable {}
extension DatadogInternal.BatteryStatus.State : Swift.Hashable {}
extension DatadogInternal.WebViewMessage.EventType : Swift.Equatable {}
extension DatadogInternal.WebViewMessage.EventType : Swift.Hashable {}
extension DatadogInternal.WebViewMessage.EventType : Swift.RawRepresentable {}
extension DatadogInternal.AppState : Swift.Equatable {}
extension DatadogInternal.AppState : Swift.Hashable {}
extension DatadogInternal.BundleType : Swift.Equatable {}
extension DatadogInternal.BundleType : Swift.Hashable {}
extension DatadogInternal.BundleType : Swift.RawRepresentable {}
extension DatadogInternal.SpanID.Representation : Swift.Equatable {}
extension DatadogInternal.SpanID.Representation : Swift.Hashable {}
extension DatadogInternal.DatadogSite : Swift.Equatable {}
extension DatadogInternal.DatadogSite : Swift.Hashable {}
extension DatadogInternal.DatadogSite : Swift.RawRepresentable {}
extension DatadogInternal.B3HTTPHeadersWriter.InjectEncoding : Swift.Equatable {}
extension DatadogInternal.B3HTTPHeadersWriter.InjectEncoding : Swift.Hashable {}
extension DatadogInternal.TraceContextInjection : Swift.Equatable {}
extension DatadogInternal.TraceContextInjection : Swift.Hashable {}
extension DatadogInternal.SessionReplayPrivacyLevel : Swift.Equatable {}
extension DatadogInternal.SessionReplayPrivacyLevel : Swift.Hashable {}
extension DatadogInternal.SessionReplayPrivacyLevel : Swift.RawRepresentable {}
extension DatadogInternal.TextAndInputPrivacyLevel : Swift.Equatable {}
extension DatadogInternal.TextAndInputPrivacyLevel : Swift.Hashable {}
extension DatadogInternal.TextAndInputPrivacyLevel : Swift.RawRepresentable {}
extension DatadogInternal.ImagePrivacyLevel : Swift.Equatable {}
extension DatadogInternal.ImagePrivacyLevel : Swift.Hashable {}
extension DatadogInternal.ImagePrivacyLevel : Swift.RawRepresentable {}
extension DatadogInternal.TouchPrivacyLevel : Swift.Equatable {}
extension DatadogInternal.TouchPrivacyLevel : Swift.Hashable {}
extension DatadogInternal.TouchPrivacyLevel : Swift.RawRepresentable {}
